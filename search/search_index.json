{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"failprint","text":"<p>Run a command, print its output only if it fails.</p> <p>Tired of searching the <code>quiet</code> options of your programs to lighten up the output of your <code>make check</code> or <code>make lint</code> commands?</p> <p>Tired of finding out that standard output and error are mixed up in some of them?</p> <p>Simply run your command through <code>failprint</code>. If it succeeds, nothing is printed. If it fails, standard error is printed. Plus other configuration goodies </p>"},{"location":"#example","title":"Example","text":"<p>You don't want to see output when the command succeeds.</p> <p></p> <p>The task runner <code>duty</code> uses <code>failprint</code>, allowing you to define tasks in Python and run them with minimalist and beautiful output:</p> <p></p>"},{"location":"#requirements","title":"Requirements","text":"<p>failprint requires Python 3.6 or above.</p> To install Python 3.6, I recommend using <code>pyenv</code>. <pre><code># install pyenv\ngit clone https://github.com/pyenv/pyenv ~/.pyenv\n\n# setup pyenv (you should also put these three lines in .bashrc or similar)\nexport PATH=\"${HOME}/.pyenv/bin:${PATH}\"\nexport PYENV_ROOT=\"${HOME}/.pyenv\"\neval \"$(pyenv init -)\"\n\n# install Python 3.6\npyenv install 3.6.12\n\n# make it available globally\npyenv global system 3.6.12\n</code></pre>"},{"location":"#installation","title":"Installation","text":"<p>With <code>pip</code>: <pre><code>pip install failprint\n</code></pre></p> <p>With <code>pipx</code>: <pre><code>python3.7 -m pip install --user pipx\npipx install failprint\n</code></pre></p>"},{"location":"#usage","title":"Usage","text":"<pre><code>% poetry run failprint -h\nusage: failprint [-h] [-c {stdout,stderr,both,none}] [-f {pretty,tap}] [-y | -Y] [-p | -P] [-q | -Q] [-s | -S] [-z | -Z] [-n NUMBER]\n                 [-t TITLE]\n                 COMMAND [COMMAND ...]\n\npositional arguments:\n  COMMAND\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -c {stdout,stderr,both,none}, --capture {stdout,stderr,both,none}\n                        Which output to capture. Colors are supported with 'both' only, unless the command has a 'force color'\n                        option.\n  -f {pretty,tap}, --format {pretty,tap}\n                        Output format. Pass your own Jinja2 template as a string with '-f custom=TEMPLATE'. Available variables:\n                        command, title (command or title passed with -t), code (exit status), success (boolean), failure (boolean),\n                        number (command number passed with -n), output (command output), nofail (boolean), quiet (boolean), silent\n                        (boolean). Available filters: indent (textwrap.indent).\n  -y, --pty             Enable the use of a pseudo-terminal. PTY doesn't allow programs to use standard input.\n  -Y, --no-pty          Disable the use of a pseudo-terminal. PTY doesn't allow programs to use standard input.\n  -p, --progress        Print progress while running a command.\n  -P, --no-progress     Don't print progress while running a command.\n  -q, --quiet           Don't print the command output, even if it failed.\n  -Q, --no-quiet        Print the command output when it fails.\n  -s, --silent          Don't print anything.\n  -S, --no-silent       Print output as usual.\n  -z, --zero, --nofail  Don't fail. Always return a success (0) exit code.\n  -Z, --no-zero, --strict\n                        Return the original exit code.\n  -n NUMBER, --number NUMBER\n                        Command number. Useful for the 'tap' format.\n  -t TITLE, --title TITLE\n                        Command title. Default is the command itself.\n</code></pre> <pre><code>from failprint.runners import run\n\ncmd = \"echo hello\"\n\nexit_code = run(\n    cmd,            # str, list of str, or Python callable\n    args=None,      # args for callable\n    kwargs=None,    # kwargs for callable\n    number=1,       # command number, useful for tap format\n    capture=None,   # stdout, stderr, both, none, True or False\n    title=None,     # command title\n    fmt=None,       # pretty, tap, or custom=\"MY_CUSTOM_FORMAT\"\n    pty=False,      # use a PTY\n    progress=True,  # print the \"progress\" template before running the command\n    nofail=False,   # always return zero\n    quiet=False,    # don't print output when the command fails\n    silent=False,   # don't print anything\n)\n</code></pre>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#0111-2023-04-10","title":"0.11.1 - 2023-04-10","text":"<p>Compare with 0.11.0</p>"},{"location":"changelog/#build","title":"Build","text":"<ul> <li>Add missing typing-extensions dependency for Python less than 3.10 (3d121fc by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0110-2023-04-10","title":"0.11.0 - 2023-04-10","text":"<p>Compare with 0.10.0</p>"},{"location":"changelog/#features","title":"Features","text":"<ul> <li>Accept name in lazy decorator (a0b9381 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0100-2023-02-18","title":"0.10.0 - 2023-02-18","text":"<p>Compare with 0.9.0</p>"},{"location":"changelog/#features_1","title":"Features","text":"<ul> <li>Provide a lazy decorator, allow running lazy callables (fa066b5 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#090-2023-02-10","title":"0.9.0 - 2023-02-10","text":"<p>Compare with 0.8.0</p>"},{"location":"changelog/#features_2","title":"Features","text":"<ul> <li>Support callables that raise <code>SystemExit</code> (867aa59 by Timoth\u00e9e Mazzucotelli). Issue #14</li> <li>Support tools that write to <code>sys.stdout.buffer</code> or <code>sys.stderr.buffer</code> (1703b86 by Timoth\u00e9e Mazzucotelli). Issue #15</li> <li>Add command option to runner (6642698 by Timoth\u00e9e Mazzucotelli). Issue #9</li> </ul>"},{"location":"changelog/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>Fetch callable names from back frames (7f2a759 by Timoth\u00e9e Mazzucotelli). Issue #16</li> <li>Support other <code>SystemExit</code> code values (abcaf5e by Timoth\u00e9e Mazzucotelli).</li> <li>Support <code>flush</code> method in buffers (2fe8077 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring","title":"Code Refactoring","text":"<ul> <li>Use future annotations (ad23ec3 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#080-2021-07-31","title":"0.8.0 - 2021-07-31","text":"<p>Compare with 0.7.0</p>"},{"location":"changelog/#features_3","title":"Features","text":"<ul> <li>Support passing a string as standard input (7c87a4c by Timoth\u00e9e Mazzucotelli). Issue #10, PR #11</li> </ul>"},{"location":"changelog/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>Initialize colorama support for Windows (deb0c78 by Timoth\u00e9e Mazzucotelli). PR #12</li> </ul>"},{"location":"changelog/#070-2021-06-20","title":"0.7.0 - 2021-06-20","text":"<p>Compare with 0.6.2</p>"},{"location":"changelog/#features_4","title":"Features","text":"<ul> <li>Return output as well as exit code from the main runner (34e8ac1 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#062-2021-01-20","title":"0.6.2 - 2021-01-20","text":"<p>Compare with 0.6.1</p>"},{"location":"changelog/#code-refactoring_1","title":"Code Refactoring","text":"<ul> <li>Use parsed options as dict directly (142e6f0 by Timoth\u00e9e Mazzucotelli).</li> <li>Add option in <code>add_flags</code> not to set defaults (dd9327e by Timoth\u00e9e Mazzucotelli).</li> <li>Consistently use <code>cmd</code> between options and API (881d99d by Timoth\u00e9e Mazzucotelli).</li> <li>Consistently use <code>fmt</code> between options and API (bda06a2 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#061-2021-01-17","title":"0.6.1 - 2021-01-17","text":"<p>Compare with 0.6.0</p>"},{"location":"changelog/#code","title":"Code","text":"<ul> <li>Separate method to add parser flags (9f2a58f by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#060-2020-10-11","title":"0.6.0 - 2020-10-11","text":"<p>Compare with 0.5.1</p>"},{"location":"changelog/#features_5","title":"Features","text":"<ul> <li>Refactor, add tests and fix bugs (523e97b by Timoth\u00e9e Mazzucotelli).<ul> <li>Restructure modules: create <code>capture</code> and <code>process</code></li> <li>Rename argument <code>output_type</code> to <code>capture</code></li> <li>Rename <code>Output</code> enum to <code>Capture</code></li> <li>Rename <code>combine</code> enum value to <code>both</code></li> <li>Rename <code>nocombine</code> enum value to <code>none</code></li> <li>Accept <code>True</code> and <code>False</code> as <code>capture</code> values</li> <li>Use more defaults in functions arguments</li> <li>Fix decoding error on Windows</li> </ul> </li> </ul>"},{"location":"changelog/#051-2020-10-04","title":"0.5.1 - 2020-10-04","text":"<p>Compare with 0.5.0</p>"},{"location":"changelog/#bug-fixes_2","title":"Bug Fixes","text":"<ul> <li>Fix progress parser argument (d5fe999 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#050-2020-10-04","title":"0.5.0 - 2020-10-04","text":"<p>Compare with 0.4.1</p>"},{"location":"changelog/#bug-fixes_3","title":"Bug Fixes","text":"<ul> <li>Use which to find exec path on Windows (5327b0c by Timoth\u00e9e Mazzucotelli).</li> <li>Fix quoting when running as shell command (0f11995 by Timoth\u00e9e Mazzucotelli).</li> <li>Run with <code>shell=True</code> on Windows (5e97141 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#features_6","title":"Features","text":"<ul> <li>Refactor and add features (22a5e8d by Timoth\u00e9e Mazzucotelli).<ul> <li>Add ability to run a function or callable</li> <li>Add <code>nocapture</code> output type</li> <li>Add silent option to API</li> <li>Accept <code>None</code> as truthful function result</li> <li>Add silent CLI flag</li> <li>Add no progress CLI flag</li> </ul> </li> </ul>"},{"location":"changelog/#041-2020-09-29","title":"0.4.1 - 2020-09-29","text":"<p>Compare with 0.4.0</p>"},{"location":"changelog/#bug-fixes_4","title":"Bug Fixes","text":"<ul> <li>Don't crash on Windows (aaa2673 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#040-2020-09-25","title":"0.4.0 - 2020-09-25","text":"<p>Compare with 0.3.0</p>"},{"location":"changelog/#features_7","title":"Features","text":"<ul> <li>Add quiet option (b676335 by Timoth\u00e9e Mazzucotelli).</li> <li>Add option to allow failure (79b3ae7 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#030-2020-05-01","title":"0.3.0 - 2020-05-01","text":"<p>Compare with 0.2.0</p>"},{"location":"changelog/#features_8","title":"Features","text":"<ul> <li>Implement progress display for pretty format (7c244e2 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#020-2020-04-28","title":"0.2.0 - 2020-04-28","text":"<p>Compare with 0.1.1</p>"},{"location":"changelog/#features_9","title":"Features","text":"<ul> <li>Add <code>--no-pty</code> option (5ba21e8 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#011-2020-04-23","title":"0.1.1 - 2020-04-23","text":"<p>Compare with 0.1.0</p>"},{"location":"changelog/#bug-fixes_5","title":"Bug Fixes","text":"<ul> <li>Fix default output type (f720cf7 by Timoth\u00e9e Mazzucotelli).</li> <li>Fix environment variable name (526f4df by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#010-2020-04-23","title":"0.1.0 - 2020-04-23","text":"<p>Compare with first commit</p>"},{"location":"changelog/#features_10","title":"Features","text":"<ul> <li>Support colors for combine format (3756dbd by Timoth\u00e9e Mazzucotelli).</li> <li>Initial commit (182af93 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"code_of_conduct/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"code_of_conduct/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"code_of_conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,   and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the overall   community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or advances of   any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email address,   without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"code_of_conduct/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"code_of_conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"code_of_conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at pawamoy@pm.me. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"code_of_conduct/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"code_of_conduct/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"code_of_conduct/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"code_of_conduct/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"code_of_conduct/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"code_of_conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p>"},{"location":"contributing/#environment-setup","title":"Environment setup","text":"<p>Nothing easier!</p> <p>Fork and clone the repository, then:</p> <pre><code>cd failprint\nmake setup\n</code></pre> <p>Note</p> <p> If it fails for some reason, you'll need to install PDM manually.</p> <p>You can install it with:</p> <pre><code>python3 -m pip install --user pipx\npipx install pdm\n</code></pre> <p>Now you can try running <code>make setup</code> again, or simply <code>pdm install</code>.</p> <p>You now have the dependencies installed.</p> <p>You can run the application with <code>pdm run failprint [ARGS...]</code>.</p> <p>Run <code>make help</code> to see all the available actions!</p>"},{"location":"contributing/#tasks","title":"Tasks","text":"<p>This project uses duty to run tasks. A Makefile is also provided. The Makefile will try to run certain tasks on multiple Python versions. If for some reason you don't want to run the task on multiple Python versions, you can do one of the following:</p> <ol> <li><code>export PYTHON_VERSIONS=</code>: this will run the task    with only the current Python version</li> <li>run the task directly with <code>pdm run duty TASK</code></li> </ol> <p>The Makefile detects if a virtual environment is activated, so <code>make</code> will work the same with the virtualenv activated or not.</p>"},{"location":"contributing/#development","title":"Development","text":"<p>As usual:</p> <ol> <li>create a new branch: <code>git checkout -b feature-or-bugfix-name</code></li> <li>edit the code and/or the documentation</li> </ol> <p>Before committing:</p> <ol> <li>run <code>make format</code> to auto-format the code</li> <li>run <code>make check</code> to check everything (fix any warning)</li> <li>run <code>make test</code> to run the tests (fix any issue)</li> <li>if you updated the documentation or the project dependencies:<ol> <li>run <code>make docs-serve</code></li> <li>go to http://localhost:8000 and check that everything looks good</li> </ol> </li> <li>follow our commit message convention</li> </ol> <p>If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review.</p> <p>Don't bother updating the changelog, we will take care of this.</p>"},{"location":"contributing/#commit-message-convention","title":"Commit message convention","text":"<p>Commit messages must follow our convention based on the Angular style or the Karma convention:</p> <pre><code>&lt;type&gt;[(scope)]: Subject\n\n[Body]\n</code></pre> <p>Subject and body must be valid Markdown. Subject must have proper casing (uppercase for first letter if it makes sense), but no dot at the end, and no punctuation in general.</p> <p>Scope and body are optional. Type can be:</p> <ul> <li><code>build</code>: About packaging, building wheels, etc.</li> <li><code>chore</code>: About packaging or repo/files management.</li> <li><code>ci</code>: About Continuous Integration.</li> <li><code>deps</code>: Dependencies update.</li> <li><code>docs</code>: About documentation.</li> <li><code>feat</code>: New feature.</li> <li><code>fix</code>: Bug fix.</li> <li><code>perf</code>: About performance.</li> <li><code>refactor</code>: Changes that are not features or bug fixes.</li> <li><code>style</code>: A change in code style/format.</li> <li><code>tests</code>: About tests.</li> </ul> <p>If you write a body, please add trailers at the end (for example issues and PR references, or co-authors), without relying on GitHub's flavored Markdown:</p> <pre><code>Body.\n\nIssue #10: https://github.com/namespace/project/issues/10\nRelated to PR namespace/other-project#15: https://github.com/namespace/other-project/pull/15\n</code></pre> <p>These \"trailers\" must appear at the end of the body, without any blank lines between them. The trailer title can contain any character except colons <code>:</code>. We expect a full URI for each trailer, not just GitHub autolinks (for example, full GitHub URLs for commits and issues, not the hash or the #issue-number).</p> <p>We do not enforce a line length on commit messages summary and body, but please avoid very long summaries, and very long lines in the body, unless they are part of code blocks that must not be wrapped.</p>"},{"location":"contributing/#pull-requests-guidelines","title":"Pull requests guidelines","text":"<p>Link to any related issue in the Pull Request message.</p> <p>During the review, we recommend using fixups:</p> <pre><code># SHA is the SHA of the commit you want to fix\ngit commit --fixup=SHA\n</code></pre> <p>Once all the changes are approved, you can squash your commits:</p> <pre><code>git rebase -i --autosquash master\n</code></pre> <p>And force-push:</p> <pre><code>git push -f\n</code></pre> <p>If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging.</p>"},{"location":"credits/","title":"Credits","text":"<p>These projects were used to build <code>failprint</code>. Thank you!</p> <p><code>python</code> | <code>pdm</code> | <code>copier-pdm</code></p>"},{"location":"credits/#exec-0--runtime-dependencies","title":"Runtime dependencies","text":"Project Summary Version (accepted) Version (last resolved) License <code>ansimarkup</code> Produce colored terminal text with an xml-like markup <code>~=1.4</code> <code>1.5.0</code> Revised BSD License <code>colorama</code> Cross-platform colored terminal text. <code>0.4.6</code> BSD License <code>jinja2</code> A very fast and expressive template engine. <code>&gt;=2.11, &lt;4</code> <code>3.1.2</code> BSD-3-Clause <code>markupsafe</code> Safely add untrusted strings to HTML/XML markup. <code>&gt;=2.0</code> <code>2.1.2</code> BSD-3-Clause <code>ptyprocess</code> Run a subprocess in a pseudo terminal <code>~=0.6; sys_platform != 'win32'</code> <code>0.7.0</code> ISC License (ISCL) <code>typing-extensions</code> Backported and Experimental Type Hints for Python 3.7+ <code>&gt;=4.1; python_version &lt; '3.10'</code> <code>4.5.0</code> Python Software Foundation License"},{"location":"credits/#exec-0--development-dependencies","title":"Development dependencies","text":"Project Summary Version (accepted) Version (last resolved) License <code>attrs</code> Classes Without Boilerplate <code>&gt;=19.2.0</code> <code>22.2.0</code> MIT <code>black</code> The uncompromising code formatter. <code>&gt;=23.1</code> <code>23.3.0</code> MIT <code>blacken-docs</code> Run Black on Python code blocks in documentation files. <code>&gt;=1.13</code> <code>1.13.0</code> MIT <code>cached-property</code> A decorator for caching properties in classes. <code>&gt;=1.5; python_version &lt; \"3.8\"</code> <code>1.5.2</code> ? <code>certifi</code> Python package for providing Mozilla's CA Bundle. <code>&gt;=2017.4.17</code> <code>2022.12.7</code> MPL-2.0 <code>charset-normalizer</code> The Real First Universal Charset Detector. Open, modern and actively maintained alternative to Chardet. <code>&lt;4,&gt;=2</code> <code>3.1.0</code> MIT <code>click</code> Composable command line interface toolkit <code>&gt;=8.0.0</code> <code>8.1.3</code> BSD-3-Clause <code>colorama</code> Cross-platform colored terminal text. <code>; platform_system == \"Windows\"</code> <code>0.4.6</code> BSD License <code>coverage</code> Code coverage measurement for Python <code>[toml]&gt;=5.2.1</code> <code>7.2.3</code> Apache-2.0 <code>dparse</code> A parser for Python dependency files <code>&gt;=0.6.2</code> <code>0.6.2</code> MIT license <code>duty</code> A simple task runner. <code>&gt;=0.8</code> <code>0.9.0</code> ISC <code>exceptiongroup</code> Backport of PEP 654 (exception groups) <code>&gt;=1.0.0; python_version &lt; \"3.11\"</code> <code>1.1.1</code> MIT License <code>execnet</code> execnet: rapid multi-Python deployment <code>&gt;=1.1</code> <code>1.9.0</code> MIT <code>ghp-import</code> Copy your docs directly to the gh-pages branch. <code>&gt;=1.0</code> <code>2.1.0</code> Apache Software License <code>git-changelog</code> Automatic Changelog generator using Jinja2 templates. <code>&gt;=1.0</code> <code>1.0.0</code> ISC <code>griffe</code> Signatures for entire Python programs. Extract the structure, the frame, the skeleton of your project, to generate API documentation or find breaking changes in your API. <code>&gt;=0.24</code> <code>0.26.0</code> ISC <code>hypothesis</code> A library for property-based testing <code>&gt;=6.13</code> <code>6.71.0</code> MPL-2.0 <code>idna</code> Internationalized Domain Names in Applications (IDNA) <code>&lt;4,&gt;=2.5</code> <code>3.4</code> BSD License <code>importlib-metadata</code> Read metadata from Python packages <code>; python_version &lt; \"3.8\"</code> <code>6.3.0</code> Apache Software License <code>iniconfig</code> brain-dead simple config-ini parsing <code>2.0.0</code> MIT License <code>jinja2</code> A very fast and expressive template engine. <code>&lt;4,&gt;=2.10</code> <code>3.1.2</code> BSD-3-Clause <code>markdown</code> Python implementation of Markdown. <code>&lt;4.0.0,&gt;=3.3.3</code> <code>3.3.7</code> BSD License <code>markdown-callouts</code> Markdown extension: a classier syntax for admonitions <code>&gt;=0.2</code> <code>0.3.0</code> MIT <code>markdown-exec</code> Utilities to execute code blocks in Markdown files. <code>&gt;=0.5</code> <code>1.4.0</code> ISC <code>markupsafe</code> Safely add untrusted strings to HTML/XML markup. <code>&gt;=2.0</code> <code>2.1.2</code> BSD-3-Clause <code>mergedeep</code> A deep merge function for \ud83d\udc0d. <code>&gt;=1.3.4</code> <code>1.3.4</code> MIT License <code>mkdocs</code> Project documentation with Markdown. <code>&gt;=1.3</code> <code>1.4.2</code> BSD License <code>mkdocs-coverage</code> MkDocs plugin to integrate your coverage HTML report into your site. <code>&gt;=0.2</code> <code>0.2.6</code> ISC <code>mkdocs-gen-files</code> MkDocs plugin to programmatically generate documentation pages during the build <code>&gt;=0.3</code> <code>0.4.0</code> MIT <code>mkdocs-literate-nav</code> MkDocs plugin to specify the navigation in Markdown instead of YAML <code>&gt;=0.4</code> <code>0.6.0</code> MIT License <code>mkdocs-material</code> Documentation that simply works <code>&gt;=7.3</code> <code>9.1.6</code> MIT License <code>mkdocs-material-extensions</code> Extension pack for Python Markdown and MkDocs Material. <code>&gt;=1.1</code> <code>1.1.1</code> MIT License <code>mkdocs-section-index</code> MkDocs plugin to allow clickable sections that lead to an index page <code>&gt;=0.3</code> <code>0.3.5</code> MIT License <code>mkdocstrings</code> Automatic documentation from sources, for MkDocs. <code>[python]&gt;=0.18</code> <code>0.21.2</code> ISC <code>mkdocstrings-python</code> A Python handler for mkdocstrings. <code>&gt;=0.5.2</code> <code>0.9.0</code> ISC <code>mypy</code> Optional static typing for Python <code>&gt;=0.910</code> <code>1.2.0</code> MIT License <code>mypy-extensions</code> Type system extensions for programs checked with the mypy type checker. <code>&gt;=0.4.3</code> <code>1.0.0</code> MIT License <code>packaging</code> Core utilities for Python packages <code>&gt;=22.0</code> <code>23.0</code> BSD License <code>pathspec</code> Utility library for gitignore style pattern matching of file paths. <code>&gt;=0.9.0</code> <code>0.11.1</code> Mozilla Public License 2.0 (MPL 2.0) <code>platformdirs</code> A small Python package for determining appropriate platform-specific dirs, e.g. a \"user data dir\". <code>&gt;=2</code> <code>3.2.0</code> MIT License <code>pluggy</code> plugin and hook calling mechanisms for python <code>&lt;2.0,&gt;=0.12</code> <code>1.0.0</code> MIT <code>pygments</code> Pygments is a syntax highlighting package written in Python. <code>&gt;=2.14</code> <code>2.14.0</code> BSD-2-Clause <code>pymdown-extensions</code> Extension pack for Python Markdown. <code>&gt;=9</code> <code>9.11</code> MIT License <code>pytest</code> pytest: simple powerful testing with Python <code>&gt;=6.2</code> <code>7.3.0</code> MIT <code>pytest-cov</code> Pytest plugin for measuring coverage. <code>&gt;=3.0</code> <code>4.0.0</code> MIT <code>pytest-randomly</code> Pytest plugin to randomly order tests and control random.seed. <code>&gt;=3.10</code> <code>3.12.0</code> MIT <code>pytest-xdist</code> pytest xdist plugin for distributed testing, most importantly across multiple CPUs <code>&gt;=2.4</code> <code>3.2.1</code> MIT <code>python-dateutil</code> Extensions to the standard Python datetime module <code>&gt;=2.8.1</code> <code>2.8.2</code> Dual License <code>pyyaml</code> YAML parser and emitter for Python <code>&gt;=5.1</code> <code>6.0</code> MIT <code>pyyaml-env-tag</code> A custom YAML tag for referencing environment variables in YAML files. <code>&gt;=0.1</code> <code>0.1</code> MIT License <code>regex</code> Alternative regular expression module, to replace re. <code>&gt;=2022.4.24</code> <code>2022.10.31</code> Apache Software License <code>requests</code> Python HTTP for Humans. <code>&gt;=2.26</code> <code>2.28.2</code> Apache 2.0 <code>ruamel-yaml</code> ruamel.yaml is a YAML parser/emitter that supports roundtrip preservation of comments, seq/map flow style, and map key order <code>&gt;=0.17.21</code> <code>0.17.21</code> MIT license <code>ruamel-yaml-clib</code> C version of reader, parser and emitter for ruamel.yaml derived from libyaml <code>&gt;=0.2.6; platform_python_implementation == \"CPython\" and python_version &lt; \"3.11\"</code> <code>0.2.7</code> MIT <code>ruff</code> An extremely fast Python linter, written in Rust. <code>&gt;=0.0.246</code> <code>0.0.261</code> MIT <code>safety</code> Checks installed dependencies for known vulnerabilities and licenses. <code>&gt;=2</code> <code>2.3.4</code> MIT license <code>semver</code> Python helper for Semantic Versioning (http://semver.org/) <code>~=2.13</code> <code>2.13.0</code> BSD <code>setuptools</code> Easily download, build, install, upgrade, and uninstall Python packages <code>&gt;=19.3</code> <code>67.6.1</code> MIT License <code>six</code> Python 2 and 3 compatibility utilities <code>&gt;=1.5</code> <code>1.16.0</code> MIT <code>sortedcontainers</code> Sorted Containers -- Sorted List, Sorted Dict, Sorted Set <code>&lt;3.0.0,&gt;=2.1.0</code> <code>2.4.0</code> Apache 2.0 <code>toml</code> Python Library for Tom's Obvious, Minimal Language <code>&gt;=0.10</code> <code>0.10.2</code> MIT <code>tomli</code> A lil' TOML parser <code>&gt;=1.1.0; python_version &lt; \"3.11\"</code> <code>2.0.1</code> MIT License <code>typed-ast</code> a fork of Python 2 and 3 ast modules with type comment support <code>&gt;=1.4.2; python_version &lt; \"3.8\" and implementation_name == \"cpython\"</code> <code>1.5.4</code> ? <code>types-markdown</code> Typing stubs for Markdown <code>&gt;=3.3</code> <code>3.4.2.7</code> Apache-2.0 license <code>types-toml</code> Typing stubs for toml <code>&gt;=0.10</code> <code>0.10.8.6</code> Apache-2.0 license <code>typing-extensions</code> Backported and Experimental Type Hints for Python 3.7+ <code>&gt;=3.10.0.0; python_version &lt; \"3.10\"</code> <code>4.5.0</code> Python Software Foundation License <code>urllib3</code> HTTP library with thread-safe connection pooling, file post, and more. <code>&lt;1.27,&gt;=1.21.1</code> <code>1.26.15</code> MIT <code>watchdog</code> Filesystem events monitoring <code>&gt;=2.0</code> <code>3.0.0</code> Apache License 2.0 <code>zipp</code> Backport of pathlib-compatible object wrapper for zip files <code>&gt;=0.5</code> <code>3.15.0</code> MIT License <p>More credits from the author</p>"},{"location":"license/","title":"License","text":"<pre><code>ISC License\n\nCopyright (c) 2020, Timoth\u00e9e Mazzucotelli\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\nOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n</code></pre>"},{"location":"reference/failprint/","title":"failprint","text":"<p>failprint package.</p> <p>Run a command, print its output only if it fails.</p>"},{"location":"reference/failprint/capture/","title":"capture","text":"<p>Enumeration of possible output captures.</p>"},{"location":"reference/failprint/capture/#failprint.capture.Capture","title":"Capture","text":"<p>         Bases: <code>enum.Enum</code></p> <p>An enum to store the different possible output types.</p>"},{"location":"reference/failprint/capture/#failprint.capture.StdBuffer","title":"StdBuffer","text":"<pre><code>StdBuffer(stdinput=None, stdout=None, stderr=None)\n</code></pre> <p>A simple placeholder for three memory buffers.</p> <p>Parameters:</p> Name Type Description Default <code>stdinput</code> <code>str | None</code> <p>String to use as standard input.</p> <code>None</code> <code>stdout</code> <code>_TextBuffer | None</code> <p>A buffer for standard output.</p> <code>None</code> <code>stderr</code> <code>_TextBuffer | None</code> <p>A buffer for standard error.</p> <code>None</code> Source code in <code>src/failprint/capture.py</code> <pre><code>def __init__(\n    self,\n    stdinput: str | None = None,\n    stdout: _TextBuffer | None = None,\n    stderr: _TextBuffer | None = None,\n):\n\"\"\"Initialize the object.\n\n    Arguments:\n        stdinput: String to use as standard input.\n        stdout: A buffer for standard output.\n        stderr: A buffer for standard error.\n    \"\"\"\n    self.stdin: StringIO | TextIO = StringIO(stdinput) if stdinput is not None else sys.stdin\n    self.stdout: _TextBuffer = stdout or _TextBuffer()\n    self.stderr: _TextBuffer = stderr or _TextBuffer()\n</code></pre>"},{"location":"reference/failprint/capture/#failprint.capture.cast_capture","title":"cast_capture","text":"<pre><code>cast_capture(value)\n</code></pre> <p>Cast a value to an actual Capture enumeration value.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>str | bool | Capture | None</code> <p>The value to cast.</p> required <p>Returns:</p> Type Description <code>Capture</code> <p>A Capture enumeration value.</p> Source code in <code>src/failprint/capture.py</code> <pre><code>def cast_capture(value: str | bool | Capture | None) -&gt; Capture:\n\"\"\"Cast a value to an actual Capture enumeration value.\n\n    Arguments:\n        value: The value to cast.\n\n    Returns:\n        A Capture enumeration value.\n    \"\"\"\n    if value is None:\n        return Capture.BOTH\n    if value is True:\n        return Capture.BOTH\n    if value is False:\n        return Capture.NONE\n    if isinstance(value, Capture):\n        return value\n    # consider it's a string\n    # let potential errors bubble up\n    return Capture(value)\n</code></pre>"},{"location":"reference/failprint/capture/#failprint.capture.stdbuffer","title":"stdbuffer","text":"<pre><code>stdbuffer(stdinput=None)\n</code></pre> <p>Capture output in a <code>with</code> statement.</p> <p>Parameters:</p> Name Type Description Default <code>stdinput</code> <code>str | None</code> <p>String to use as standard input.</p> <code>None</code> <p>Yields:</p> Type Description <code>Iterator[StdBuffer]</code> <p>An instance of <code>StdBuffer</code>.</p> Source code in <code>src/failprint/capture.py</code> <pre><code>@contextmanager\ndef stdbuffer(stdinput: str | None = None) -&gt; Iterator[StdBuffer]:\n\"\"\"Capture output in a `with` statement.\n\n    Arguments:\n        stdinput: String to use as standard input.\n\n    Yields:\n        An instance of `StdBuffer`.\n    \"\"\"\n    old_stdin = sys.stdin\n    old_stdout = sys.stdout\n    old_stderr = sys.stderr\n\n    buffer = StdBuffer(stdinput)\n\n    sys.stdin = buffer.stdin\n    sys.stdout = buffer.stdout\n    sys.stderr = buffer.stderr\n\n    yield buffer\n\n    sys.stdin = old_stdin\n    sys.stdout = old_stdout\n    sys.stderr = old_stderr\n\n    buffer.stdin.close()\n    buffer.stdout.close()\n    buffer.stderr.close()\n</code></pre>"},{"location":"reference/failprint/cli/","title":"cli","text":"<p>Module that contains the command line application.</p>"},{"location":"reference/failprint/cli/#failprint.cli.ArgParser","title":"ArgParser","text":"<p>         Bases: <code>argparse.ArgumentParser</code></p> <p>A custom argument parser with a helper method to add boolean flags.</p>"},{"location":"reference/failprint/cli/#failprint.cli.ArgParser.add_bool_argument","title":"add_bool_argument","text":"<pre><code>add_bool_argument(\n    truthy, falsy, truthy_help=\"\", falsy_help=\"\", **kwargs\n)\n</code></pre> <p>Add a boolean flag/argument to the parser.</p> <p>Parameters:</p> Name Type Description Default <code>truthy</code> <code>Sequence[str]</code> <p>Values that will store true in the destination.</p> required <code>falsy</code> <code>Sequence[str]</code> <p>Values that will store false in the destination.</p> required <code>truthy_help</code> <code>str</code> <p>Help for the truthy arguments.</p> <code>''</code> <code>falsy_help</code> <code>str</code> <p>Help for the falsy arguments.</p> <code>''</code> <code>**kwargs</code> <code>Any</code> <p>Remaining keyword arguments passed to <code>argparse.ArgumentParser.add_argument</code>.</p> <code>{}</code> Source code in <code>src/failprint/cli.py</code> <pre><code>def add_bool_argument(\n    self,\n    truthy: Sequence[str],\n    falsy: Sequence[str],\n    truthy_help: str = \"\",\n    falsy_help: str = \"\",\n    **kwargs: Any,\n) -&gt; None:\n\"\"\"Add a boolean flag/argument to the parser.\n\n    Arguments:\n        truthy: Values that will store true in the destination.\n        falsy: Values that will store false in the destination.\n        truthy_help: Help for the truthy arguments.\n        falsy_help: Help for the falsy arguments.\n        **kwargs: Remaining keyword arguments passed to `argparse.ArgumentParser.add_argument`.\n    \"\"\"\n    truthy_kwargs = {**kwargs, \"help\": truthy_help, \"action\": \"store_true\"}\n    falsy_kwargs = {**kwargs, \"help\": falsy_help, \"action\": \"store_false\"}\n\n    mxg = self.add_mutually_exclusive_group()\n    mxg.add_argument(*truthy, **truthy_kwargs)  # type: ignore[arg-type]  # mypy is confused by arguments position\n    mxg.add_argument(*falsy, **falsy_kwargs)  # type: ignore[arg-type]\n</code></pre>"},{"location":"reference/failprint/cli/#failprint.cli.add_flags","title":"add_flags","text":"<pre><code>add_flags(parser, *, set_defaults=True)\n</code></pre> <p>Add some boolean flags to the parser.</p> <p>We made this method separate and public for its use in duty.</p> <p>Parameters:</p> Name Type Description Default <code>parser</code> <code>ArgParser</code> <p>The parser to add flags to.</p> required <code>set_defaults</code> <code>bool</code> <p>Whether to set default values on arguments.</p> <code>True</code> <p>Returns:</p> Type Description <code>ArgParser</code> <p>The augmented parser.</p> Source code in <code>src/failprint/cli.py</code> <pre><code>def add_flags(parser: ArgParser, *, set_defaults: bool = True) -&gt; ArgParser:\n\"\"\"Add some boolean flags to the parser.\n\n    We made this method separate and public\n    for its use in [duty](https://github.com/pawamoy/duty).\n\n    Arguments:\n        parser: The parser to add flags to.\n        set_defaults: Whether to set default values on arguments.\n\n    Returns:\n        The augmented parser.\n    \"\"\"\n    # IMPORTANT: the arguments destinations should match\n    # the parameters names of the failprint.runners.run function.\n    # As long as names are consistent between the two,\n    # it's very easy to pass CLI args to the function,\n    # and it also allows to avoid duplicating the parser arguments\n    # in dependent projects like duty (https://github.com/pawamoy/duty) :)\n    parser.add_argument(\n        \"-c\",\n        \"--capture\",\n        choices=list(Capture),\n        type=Capture,\n        help=\"Which output to capture. Colors are supported with 'both' only, unless the command has a 'force color' option.\",\n    )\n    parser.add_argument(\n        \"-f\",\n        \"--fmt\",\n        \"--format\",\n        dest=\"fmt\",\n        choices=formats.keys(),\n        type=accept_custom_format,\n        default=None,\n        help=\"Output format. Pass your own Jinja2 template as a string with '-f custom=TEMPLATE'. \"\n        \"Available variables: command, title (command or title passed with -t), code (exit status), \"\n        \"success (boolean), failure (boolean), number (command number passed with -n), \"\n        \"output (command output), nofail (boolean), quiet (boolean), silent (boolean). \"\n        \"Available filters: indent (textwrap.indent).\",\n    )\n    parser.add_bool_argument(\n        [\"-y\", \"--pty\"],\n        [\"-Y\", \"--no-pty\"],\n        dest=\"pty\",\n        default=True if set_defaults else None,\n        truthy_help=\"Enable the use of a pseudo-terminal. PTY doesn't allow programs to use standard input.\",\n        falsy_help=\"Disable the use of a pseudo-terminal. PTY doesn't allow programs to use standard input.\",\n    )\n    parser.add_bool_argument(\n        [\"-p\", \"--progress\"],\n        [\"-P\", \"--no-progress\"],\n        dest=\"progress\",\n        default=True if set_defaults else None,\n        truthy_help=\"Print progress while running a command.\",\n        falsy_help=\"Don't print progress while running a command.\",\n    )\n    # TODO: specific to the format\n    parser.add_bool_argument(\n        [\"-q\", \"--quiet\"],\n        [\"-Q\", \"--no-quiet\"],\n        dest=\"quiet\",\n        default=False if set_defaults else None,\n        truthy_help=\"Don't print the command output, even if it failed.\",\n        falsy_help=\"Print the command output when it fails.\",\n    )\n    # TODO: specific to the format\n    parser.add_bool_argument(\n        [\"-s\", \"--silent\"],\n        [\"-S\", \"--no-silent\"],\n        dest=\"silent\",\n        default=False if set_defaults else None,\n        truthy_help=\"Don't print anything.\",\n        falsy_help=\"Print output as usual.\",\n    )\n    parser.add_bool_argument(\n        [\"-z\", \"--zero\", \"--nofail\"],\n        [\"-Z\", \"--no-zero\", \"--strict\"],\n        dest=\"nofail\",\n        default=False if set_defaults else None,\n        truthy_help=\"Don't fail. Always return a success (0) exit code.\",\n        falsy_help=\"Return the original exit code.\",\n    )\n    return parser\n</code></pre>"},{"location":"reference/failprint/cli/#failprint.cli.get_parser","title":"get_parser","text":"<pre><code>get_parser()\n</code></pre> <p>Return the CLI argument parser.</p> <p>Returns:</p> Type Description <code>ArgParser</code> <p>An argparse parser.</p> Source code in <code>src/failprint/cli.py</code> <pre><code>def get_parser() -&gt; ArgParser:\n\"\"\"Return the CLI argument parser.\n\n    Returns:\n        An argparse parser.\n    \"\"\"\n    parser = add_flags(ArgParser(prog=\"failprint\"))\n    # TODO: specific to the format\n    parser.add_argument(\"-n\", \"--number\", type=int, default=1, help=\"Command number. Useful for the 'tap' format.\")\n    # TODO: specific to the format\n    parser.add_argument(\"-t\", \"--title\", help=\"Command title. Default is the command itself.\")\n    parser.add_argument(\"cmd\", metavar=\"COMMAND\", nargs=\"+\")\n    return parser\n</code></pre>"},{"location":"reference/failprint/cli/#failprint.cli.main","title":"main","text":"<pre><code>main(args=None)\n</code></pre> <p>Run the main program.</p> <p>This function is executed when you type <code>failprint</code> or <code>python -m failprint</code>.</p> <p>Parameters:</p> Name Type Description Default <code>args</code> <code>list[str] | None</code> <p>Arguments passed from the command line.</p> <code>None</code> <p>Returns:</p> Type Description <code>int</code> <p>An exit code.</p> Source code in <code>src/failprint/cli.py</code> <pre><code>def main(args: list[str] | None = None) -&gt; int:\n\"\"\"Run the main program.\n\n    This function is executed when you type `failprint` or `python -m failprint`.\n\n    Parameters:\n        args: Arguments passed from the command line.\n\n    Returns:\n        An exit code.\n    \"\"\"\n    parser = get_parser()\n    opts = parser.parse_args(args).__dict__.items()\n    return run(**{_: value for _, value in opts if value is not None}).code\n</code></pre>"},{"location":"reference/failprint/formats/","title":"formats","text":"<p>Output-printing formats.</p>"},{"location":"reference/failprint/formats/#failprint.formats.Format","title":"Format","text":"<pre><code>Format(\n    template, *, progress_template=None, accept_ansi=True\n)\n</code></pre> <p>Class to define a display format.</p> <p>Parameters:</p> Name Type Description Default <code>template</code> <code>str</code> <p>The main template.</p> required <code>progress_template</code> <code>str | None</code> <p>The template to show progress.</p> <code>None</code> <code>accept_ansi</code> <code>bool</code> <p>Whether to accept ANSI sequences.</p> <code>True</code> Source code in <code>src/failprint/formats.py</code> <pre><code>def __init__(self, template: str, *, progress_template: str | None = None, accept_ansi: bool = True) -&gt; None:\n\"\"\"Initialize the object.\n\n    Arguments:\n        template: The main template.\n        progress_template: The template to show progress.\n        accept_ansi: Whether to accept ANSI sequences.\n    \"\"\"\n    self.template = template\n    self.progress_template = progress_template\n    self.accept_ansi = accept_ansi\n</code></pre>"},{"location":"reference/failprint/formats/#failprint.formats.accept_custom_format","title":"accept_custom_format","text":"<pre><code>accept_custom_format(string)\n</code></pre> <p>Store the value in <code>formats</code> if it starts with custom.</p> <p>Parameters:</p> Name Type Description Default <code>string</code> <code>str</code> <p>A format name.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The format name, or <code>custom</code> if it started with <code>custom=</code>.</p> Source code in <code>src/failprint/formats.py</code> <pre><code>def accept_custom_format(string: str) -&gt; str:\n\"\"\"Store the value in `formats` if it starts with custom.\n\n    Arguments:\n        string: A format name.\n\n    Returns:\n        The format name, or `custom` if it started with `custom=`.\n    \"\"\"\n    if string.startswith(\"custom=\"):\n        formats[\"custom\"] = Format(string[7:])\n        return \"custom\"\n    return string\n</code></pre>"},{"location":"reference/failprint/formats/#failprint.formats.as_python_statement","title":"as_python_statement","text":"<pre><code>as_python_statement(func, args=None, kwargs=None)\n</code></pre> <p>Transform a callable and its arguments into a Python statement string.</p> <p>Parameters:</p> Name Type Description Default <code>func</code> <code>Callable | LazyCallable</code> <p>The callable to transform.</p> required <code>args</code> <code>Sequence | None</code> <p>Positional arguments passed to the function.</p> <code>None</code> <code>kwargs</code> <code>dict | None</code> <p>Keyword arguments passed to the function.</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>A Python statement.</p> Source code in <code>src/failprint/formats.py</code> <pre><code>def as_python_statement(func: Callable | LazyCallable, args: Sequence | None = None, kwargs: dict | None = None) -&gt; str:\n\"\"\"Transform a callable and its arguments into a Python statement string.\n\n    Arguments:\n        func: The callable to transform.\n        args: Positional arguments passed to the function.\n        kwargs: Keyword arguments passed to the function.\n\n    Returns:\n        A Python statement.\n    \"\"\"\n    if isinstance(func, LazyCallable):\n        callable_name = func.name or _get_callable_name(func.call)\n        args = args or func.args\n        kwargs = kwargs or func.kwargs\n    else:\n        callable_name = _get_callable_name(func)\n    args_str = [repr(arg) for arg in args] if args else []\n    kwargs_str = [f\"{k}={v!r}\" for k, v in kwargs.items()] if kwargs else []\n    arguments = \", \".join(args_str + kwargs_str)\n    return f\"{callable_name}({arguments})\"\n</code></pre>"},{"location":"reference/failprint/formats/#failprint.formats.as_shell_command","title":"as_shell_command","text":"<pre><code>as_shell_command(cmd)\n</code></pre> <p>Rebuild a command line from system arguments.</p> <p>Parameters:</p> Name Type Description Default <code>cmd</code> <code>list[str]</code> <p>The command as a list of strings.</p> required <p>Returns:</p> Type Description <code>str</code> <p>A printable and shell-runnable command.</p> Source code in <code>src/failprint/formats.py</code> <pre><code>def as_shell_command(cmd: list[str]) -&gt; str:\n\"\"\"Rebuild a command line from system arguments.\n\n    Arguments:\n        cmd: The command as a list of strings.\n\n    Returns:\n        A printable and shell-runnable command.\n    \"\"\"\n    parts = []\n    for part in cmd:\n        if not part:\n            parts.append('\"\"')\n            continue\n        has_spaces = \" \" in part\n        has_double_quotes = '\"' in part\n        has_single_quotes = \"'\" in part\n        if has_double_quotes and not has_single_quotes:\n            # double quotes, no single quotes\n            # -&gt; wrap in single quotes\n            part = f\"'{part}'\"  # noqa: PLW2901\n        elif has_single_quotes and has_double_quotes:\n            # double and single quotes\n            # -&gt; escape double quotes, wrap in double quotes\n            part = part.replace('\"', r\"\\\"\")  # noqa: PLW2901\n            part = f'\"{part}\"'  # noqa: PLW2901\n        elif has_single_quotes or has_spaces:\n            # spaces or single quotes\n            # -&gt; wrap in double quotes\n            part = f'\"{part}\"'  # noqa: PLW2901\n        parts.append(part)\n    return \" \".join(parts)\n</code></pre>"},{"location":"reference/failprint/formats/#failprint.formats.printable_command","title":"printable_command","text":"<pre><code>printable_command(cmd, args=None, kwargs=None)\n</code></pre> <p>Transform a command or function into a string.</p> <p>Parameters:</p> Name Type Description Default <code>cmd</code> <code>CmdFuncType</code> <p>The command or function to transform.</p> required <code>args</code> <code>Sequence | None</code> <p>Positional arguments passed to the function.</p> <code>None</code> <code>kwargs</code> <code>dict | None</code> <p>Keyword arguments passed to the function.</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>A shell command or python statement string.</p> Source code in <code>src/failprint/formats.py</code> <pre><code>def printable_command(cmd: CmdFuncType, args: Sequence | None = None, kwargs: dict | None = None) -&gt; str:\n\"\"\"Transform a command or function into a string.\n\n    Arguments:\n        cmd: The command or function to transform.\n        args: Positional arguments passed to the function.\n        kwargs: Keyword arguments passed to the function.\n\n    Returns:\n        A shell command or python statement string.\n    \"\"\"\n    if isinstance(cmd, str):\n        return cmd\n    if callable(cmd):\n        return as_python_statement(cmd, args, kwargs)\n    return as_shell_command(cmd)\n</code></pre>"},{"location":"reference/failprint/lazy/","title":"lazy","text":"<p>This module contains a <code>lazy</code> decorator.</p>"},{"location":"reference/failprint/lazy/#failprint.lazy.LazyCallable","title":"LazyCallable","text":"<pre><code>LazyCallable(call, args, kwargs, name=None)\n</code></pre> <p>         Bases: <code>Generic[_R]</code></p> <p>This class allows users to create and pass lazy callables to the runner.</p> <p>Parameters:</p> Name Type Description Default <code>call</code> <code>Callable[_P, _R]</code> <p>The origin callable.</p> required <code>args</code> <code>tuple</code> <p>The <code>*args</code> to pass when calling.</p> required <code>kwargs</code> <code>dict</code> <p>The <code>**kwargs</code> to pass when calling.</p> required <code>name</code> <code>str | None</code> <p>The name of the callable.</p> <code>None</code> Source code in <code>src/failprint/lazy.py</code> <pre><code>def __init__(self, call: Callable[_P, _R], args: tuple, kwargs: dict, name: str | None = None) -&gt; None:\n\"\"\"Initialize a lazy callable.\n\n    Parameters:\n        call: The origin callable.\n        args: The `*args` to pass when calling.\n        kwargs: The `**kwargs` to pass when calling.\n        name: The name of the callable.\n    \"\"\"\n    self.call = call\n    self.args = args\n    self.kwargs = kwargs\n    self.name = name\n</code></pre>"},{"location":"reference/failprint/lazy/#failprint.lazy.lazy","title":"lazy","text":"<pre><code>lazy(call=None, name=None)\n</code></pre> <p>Transform a callable into a lazy callable.</p> <p>Being able to create a lazy callable improves the UX/DX. Instead of having to pass <code>args</code> and <code>kwargs</code> to the runner, one can now call the function directly, enjoying auto-completion and other editor features. Before:</p> <pre><code>from failprint.runners import run\n\n\ndef greet(name):\n    return f\"hello {name}\"\n\n\nrun(greet, args=[\"tim\"])\n</code></pre> <p>After:</p> <pre><code>from failprint.runners import run\nfrom failprint.lazy import lazy\n\n\n@lazy\ndef greet(name):\n    return f\"hello {name}\"\n\n\nrun(greet(\"tim\"))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>call</code> <code>Callable[_P, _R] | None</code> <p>The callable to lazify.</p> <code>None</code> <code>name</code> <code>str | None</code> <p>An optional name to give to the new callable.</p> <code>None</code> <p>Returns:</p> Type Description <code>Callable[_P, LazyCallable] | _DecoratorType</code> <p>A lazy callable instance.</p> Source code in <code>src/failprint/lazy.py</code> <pre><code>def lazy(call: Callable[_P, _R] | None = None, name: str | None = None) -&gt; Callable[_P, LazyCallable] | _DecoratorType:\n\"\"\"Transform a callable into a lazy callable.\n\n    Being able to create a lazy callable improves the UX/DX.\n    Instead of having to pass `args` and `kwargs` to the runner,\n    one can now call the function directly, enjoying auto-completion\n    and other editor features. Before:\n\n    ```python\n    from failprint.runners import run\n\n\n    def greet(name):\n        return f\"hello {name}\"\n\n\n    run(greet, args=[\"tim\"])\n    ```\n\n    After:\n\n    ```python\n    from failprint.runners import run\n    from failprint.lazy import lazy\n\n\n    @lazy\n    def greet(name):\n        return f\"hello {name}\"\n\n\n    run(greet(\"tim\"))\n    ```\n\n    Parameters:\n        call: The callable to lazify.\n        name: An optional name to give to the new callable.\n\n    Returns:\n        A lazy callable instance.\n    \"\"\"\n    if name is None and isinstance(call, str):\n        call, name = name, call\n        warnings.warn(\n            \"Passing a name as positional argument is deprecated. Use a keyword argument instead.\",\n            DeprecationWarning,\n            stacklevel=2,\n        )\n\n    if call is None:\n\n        def decorator(func: _FunctionType) -&gt; _FunctionType:\n            return _lazy(func, name)\n\n        return decorator\n\n    return _lazy(call, name)\n</code></pre>"},{"location":"reference/failprint/process/","title":"process","text":"<p>Functions related to subprocesses.</p>"},{"location":"reference/failprint/process/#failprint.process.run_pty_subprocess","title":"run_pty_subprocess","text":"<pre><code>run_pty_subprocess(\n    cmd, *, capture=Capture.BOTH, stdin=None\n)\n</code></pre> <p>Run a command in a PTY subprocess.</p> <p>Parameters:</p> Name Type Description Default <code>cmd</code> <code>list[str]</code> <p>The command to run.</p> required <code>capture</code> <code>Capture</code> <p>The output to capture.</p> <code>Capture.BOTH</code> <code>stdin</code> <code>str | None</code> <p>String to use as standard input.</p> <code>None</code> <p>Returns:</p> Type Description <code>tuple[int, str]</code> <p>The exit code and the command output.</p> Source code in <code>src/failprint/process.py</code> <pre><code>def run_pty_subprocess(\n    cmd: list[str],\n    *,\n    capture: Capture = Capture.BOTH,\n    stdin: str | None = None,\n) -&gt; tuple[int, str]:\n\"\"\"Run a command in a PTY subprocess.\n\n    Arguments:\n        cmd: The command to run.\n        capture: The output to capture.\n        stdin: String to use as standard input.\n\n    Returns:\n        The exit code and the command output.\n    \"\"\"\n    process = PtyProcessUnicode.spawn(cmd)\n    pty_output: list[str] = []\n\n    if stdin is not None:\n        process.setecho(state=False)\n        process.waitnoecho()\n        process.write(stdin)\n        process.sendeof()\n        # not sure why but sending only one eof is not always enough,\n        # so we send a second one and ignore any IO error\n        with contextlib.suppress(OSError):\n            process.sendeof()\n\n    while True:\n        try:\n            output_data = process.read()\n        except EOFError:\n            break\n        if capture == Capture.NONE:\n            print(output_data, end=\"\", flush=True)  # noqa: T201\n        else:\n            pty_output.append(output_data)\n\n    output = \"\".join(pty_output).replace(\"\\r\\n\", \"\\n\")\n    return process.wait(), output\n</code></pre>"},{"location":"reference/failprint/process/#failprint.process.run_subprocess","title":"run_subprocess","text":"<pre><code>run_subprocess(\n    cmd, *, capture=Capture.BOTH, shell=False, stdin=None\n)\n</code></pre> <p>Run a command in a subprocess.</p> <p>Parameters:</p> Name Type Description Default <code>cmd</code> <code>CmdType</code> <p>The command to run.</p> required <code>capture</code> <code>Capture</code> <p>The output to capture.</p> <code>Capture.BOTH</code> <code>shell</code> <code>bool</code> <p>Whether to run the command in a shell.</p> <code>False</code> <code>stdin</code> <code>str | None</code> <p>String to use as standard input.</p> <code>None</code> <p>Returns:</p> Type Description <code>tuple[int, str]</code> <p>The exit code and the command raw output.</p> Source code in <code>src/failprint/process.py</code> <pre><code>def run_subprocess(\n    cmd: CmdType,\n    *,\n    capture: Capture = Capture.BOTH,\n    shell: bool = False,\n    stdin: str | None = None,\n) -&gt; tuple[int, str]:\n\"\"\"Run a command in a subprocess.\n\n    Arguments:\n        cmd: The command to run.\n        capture: The output to capture.\n        shell: Whether to run the command in a shell.\n        stdin: String to use as standard input.\n\n    Returns:\n        The exit code and the command raw output.\n    \"\"\"\n    if capture == Capture.NONE:\n        stdout_opt = None\n        stderr_opt = None\n    else:\n        stdout_opt = subprocess.PIPE\n        stderr_opt = subprocess.STDOUT if capture == Capture.BOTH else subprocess.PIPE\n\n    if shell and not isinstance(cmd, str):\n        cmd = printable_command(cmd)\n\n    process = subprocess.run(\n        cmd,\n        input=stdin,\n        stdout=stdout_opt,\n        stderr=stderr_opt,\n        shell=shell,\n        text=True,\n        encoding=\"utf8\",\n    )\n\n    if capture == Capture.NONE:\n        output = \"\"\n    elif capture == Capture.STDERR:\n        output = process.stderr\n    else:\n        output = process.stdout\n\n    return process.returncode, output\n</code></pre>"},{"location":"reference/failprint/runners/","title":"runners","text":"<p>Functions to run commands and capture output.</p>"},{"location":"reference/failprint/runners/#failprint.runners.RunResult","title":"RunResult","text":"<pre><code>RunResult(code, output)\n</code></pre> <p>Placeholder for a run result.</p> <p>Parameters:</p> Name Type Description Default <code>code</code> <code>int</code> <p>The exit code of the command.</p> required <code>output</code> <code>str</code> <p>The output of the command.</p> required Source code in <code>src/failprint/runners.py</code> <pre><code>def __init__(self, code: int, output: str) -&gt; None:\n\"\"\"Initialize the object.\n\n    Arguments:\n        code: The exit code of the command.\n        output: The output of the command.\n    \"\"\"\n    self.code = code\n    self.output = output\n</code></pre>"},{"location":"reference/failprint/runners/#failprint.runners.run","title":"run","text":"<pre><code>run(\n    cmd,\n    *,\n    args=None,\n    kwargs=None,\n    number=1,\n    capture=None,\n    title=None,\n    fmt=None,\n    pty=False,\n    progress=True,\n    nofail=False,\n    quiet=False,\n    silent=False,\n    stdin=None,\n    command=None\n)\n</code></pre> <p>Run a command in a subprocess or a Python function, and print its output if it fails.</p> <p>Parameters:</p> Name Type Description Default <code>cmd</code> <code>CmdFuncType</code> <p>The command to run.</p> required <code>args</code> <code>Sequence | None</code> <p>Arguments to pass to the callable.</p> <code>None</code> <code>kwargs</code> <code>dict | None</code> <p>Keyword arguments to pass to the callable.</p> <code>None</code> <code>number</code> <code>int</code> <p>The command number.</p> <code>1</code> <code>capture</code> <code>str | bool | Capture | None</code> <p>The output to capture.</p> <code>None</code> <code>title</code> <code>str | None</code> <p>The command title.</p> <code>None</code> <code>fmt</code> <code>str | None</code> <p>The output format.</p> <code>None</code> <code>pty</code> <code>bool</code> <p>Whether to run in a PTY.</p> <code>False</code> <code>progress</code> <code>bool</code> <p>Whether to show progress.</p> <code>True</code> <code>nofail</code> <code>bool</code> <p>Whether to always succeed.</p> <code>False</code> <code>quiet</code> <code>bool</code> <p>Whether to not print the command output.</p> <code>False</code> <code>silent</code> <code>bool</code> <p>Don't print anything.</p> <code>False</code> <code>stdin</code> <code>str | None</code> <p>String to use as standard input.</p> <code>None</code> <code>command</code> <code>str | None</code> <p>The command to display.</p> <code>None</code> <p>Returns:</p> Type Description <code>RunResult</code> <p>The command exit code, or 0 if <code>nofail</code> is True.</p> Source code in <code>src/failprint/runners.py</code> <pre><code>def run(\n    cmd: CmdFuncType,\n    *,\n    args: Sequence | None = None,\n    kwargs: dict | None = None,\n    number: int = 1,\n    capture: str | bool | Capture | None = None,\n    title: str | None = None,\n    fmt: str | None = None,\n    pty: bool = False,\n    progress: bool = True,\n    nofail: bool = False,\n    quiet: bool = False,\n    silent: bool = False,\n    stdin: str | None = None,\n    command: str | None = None,\n) -&gt; RunResult:\n\"\"\"Run a command in a subprocess or a Python function, and print its output if it fails.\n\n    Arguments:\n        cmd: The command to run.\n        args: Arguments to pass to the callable.\n        kwargs: Keyword arguments to pass to the callable.\n        number: The command number.\n        capture: The output to capture.\n        title: The command title.\n        fmt: The output format.\n        pty: Whether to run in a PTY.\n        progress: Whether to show progress.\n        nofail: Whether to always succeed.\n        quiet: Whether to not print the command output.\n        silent: Don't print anything.\n        stdin: String to use as standard input.\n        command: The command to display.\n\n    Returns:\n        The command exit code, or 0 if `nofail` is True.\n    \"\"\"\n    format_name: str = fmt or os.environ.get(\"FAILPRINT_FORMAT\", DEFAULT_FORMAT)  # type: ignore[assignment]\n    format_name = accept_custom_format(format_name)\n    format_obj = formats.get(format_name, formats[DEFAULT_FORMAT])\n\n    env = Environment(autoescape=False)  # noqa: S701 (no HTML: no need to escape)\n    env.filters[\"indent\"] = textwrap.indent\n\n    command = command if command is not None else printable_command(cmd, args, kwargs)\n\n    if not silent and progress and format_obj.progress_template:\n        progress_template = env.from_string(format_obj.progress_template)\n        ansiprint(progress_template.render({\"title\": title, \"command\": command}), end=\"\\r\")\n\n    capture = cast_capture(capture)\n\n    if callable(cmd):\n        code, output = run_function(cmd, args=args, kwargs=kwargs, capture=capture, stdin=stdin)\n    else:\n        code, output = run_command(cmd, capture=capture, ansi=format_obj.accept_ansi, pty=pty, stdin=stdin)\n\n    if not silent:\n        template = env.from_string(format_obj.template)\n        ansiprint(\n            template.render(\n                {\n                    \"title\": title,\n                    \"command\": command,\n                    \"code\": code,\n                    \"success\": code == 0,\n                    \"failure\": code != 0,\n                    \"number\": number,\n                    \"output\": output,\n                    \"nofail\": nofail,\n                    \"quiet\": quiet,\n                    \"silent\": silent,\n                },\n            ),\n        )\n\n    return RunResult(0 if nofail else code, output)\n</code></pre>"},{"location":"reference/failprint/runners/#failprint.runners.run_command","title":"run_command","text":"<pre><code>run_command(\n    cmd,\n    *,\n    capture=Capture.BOTH,\n    ansi=False,\n    pty=False,\n    stdin=None\n)\n</code></pre> <p>Run a command.</p> <p>Parameters:</p> Name Type Description Default <code>cmd</code> <code>CmdType</code> <p>The command to run.</p> required <code>capture</code> <code>Capture</code> <p>The output to capture.</p> <code>Capture.BOTH</code> <code>ansi</code> <code>bool</code> <p>Whether to accept ANSI sequences.</p> <code>False</code> <code>pty</code> <code>bool</code> <p>Whether to run in a PTY.</p> <code>False</code> <code>stdin</code> <code>str | None</code> <p>String to use as standard input.</p> <code>None</code> <p>Returns:</p> Type Description <code>tuple[int, str]</code> <p>The exit code and the command output.</p> Source code in <code>src/failprint/runners.py</code> <pre><code>def run_command(\n    cmd: CmdType,\n    *,\n    capture: Capture = Capture.BOTH,\n    ansi: bool = False,\n    pty: bool = False,\n    stdin: str | None = None,\n) -&gt; tuple[int, str]:\n\"\"\"Run a command.\n\n    Arguments:\n        cmd: The command to run.\n        capture: The output to capture.\n        ansi: Whether to accept ANSI sequences.\n        pty: Whether to run in a PTY.\n        stdin: String to use as standard input.\n\n    Returns:\n        The exit code and the command output.\n    \"\"\"\n    shell = isinstance(cmd, str)\n\n    # if chosen format doesn't accept ansi, or on Windows, don't use pty\n    if pty and (not ansi or WINDOWS):\n        pty = False\n\n    # pty can only combine, so only use pty when combining\n    if pty and capture in {Capture.BOTH, Capture.NONE}:\n        if shell:\n            cmd = [\"sh\", \"-c\", cmd]  # type: ignore[list-item]  # we know cmd is str\n        return run_pty_subprocess(cmd, capture=capture, stdin=stdin)  # type: ignore[arg-type]  # we made sure cmd is a list\n\n    # we are on Windows\n    if WINDOWS:\n        # make sure the process can find the executable\n        if not shell:\n            cmd[0] = shutil.which(cmd[0]) or cmd[0]  # type: ignore[index]  # we know cmd is a list\n        return run_subprocess(cmd, capture=capture, shell=shell, stdin=stdin)\n\n    return run_subprocess(cmd, capture=capture, shell=shell, stdin=stdin)\n</code></pre>"},{"location":"reference/failprint/runners/#failprint.runners.run_function","title":"run_function","text":"<pre><code>run_function(\n    func,\n    *,\n    args=None,\n    kwargs=None,\n    capture=Capture.BOTH,\n    stdin=None\n)\n</code></pre> <p>Run a function.</p> <p>Parameters:</p> Name Type Description Default <code>func</code> <code>Callable</code> <p>The function to run.</p> required <code>args</code> <code>Sequence | None</code> <p>Positional arguments passed to the function.</p> <code>None</code> <code>kwargs</code> <code>dict | None</code> <p>Keyword arguments passed to the function.</p> <code>None</code> <code>capture</code> <code>Capture</code> <p>The output to capture.</p> <code>Capture.BOTH</code> <code>stdin</code> <code>str | None</code> <p>String to use as standard input.</p> <code>None</code> <p>Returns:</p> Type Description <code>tuple[int, str]</code> <p>The exit code and the function output.</p> Source code in <code>src/failprint/runners.py</code> <pre><code>def run_function(\n    func: Callable,\n    *,\n    args: Sequence | None = None,\n    kwargs: dict | None = None,\n    capture: Capture = Capture.BOTH,\n    stdin: str | None = None,\n) -&gt; tuple[int, str]:\n\"\"\"Run a function.\n\n    Arguments:\n        func: The function to run.\n        args: Positional arguments passed to the function.\n        kwargs: Keyword arguments passed to the function.\n        capture: The output to capture.\n        stdin: String to use as standard input.\n\n    Returns:\n        The exit code and the function output.\n    \"\"\"\n    args = args or []\n    kwargs = kwargs or {}\n\n    if capture == Capture.NONE:\n        return run_function_get_code(func, stderr=sys.stderr, args=args, kwargs=kwargs), \"\"\n\n    with stdbuffer(stdin) as buffer:\n        if capture == Capture.BOTH:\n            # combining stdout and stderr\n            # -&gt; redirect stderr to stdout\n            buffer.stderr = buffer.stdout\n            sys.stderr = buffer.stdout\n\n        code = run_function_get_code(func, stderr=buffer.stderr, args=args, kwargs=kwargs)\n        output = buffer.stderr.getvalue() if capture == Capture.STDERR else buffer.stdout.getvalue()\n\n    return code, output\n</code></pre>"},{"location":"reference/failprint/runners/#failprint.runners.run_function_get_code","title":"run_function_get_code","text":"<pre><code>run_function_get_code(func, *, stderr, args, kwargs)\n</code></pre> <p>Run a function and return a exit code.</p> <p>Parameters:</p> Name Type Description Default <code>func</code> <code>Callable</code> <p>The function to run.</p> required <code>stderr</code> <code>TextIO</code> <p>A file descriptor to write potential tracebacks.</p> required <code>args</code> <code>Sequence</code> <p>Positional arguments passed to the function.</p> required <code>kwargs</code> <code>dict</code> <p>Keyword arguments passed to the function.</p> required <p>Returns:</p> Type Description <code>int</code> <p>An exit code.</p> Source code in <code>src/failprint/runners.py</code> <pre><code>def run_function_get_code(\n    func: Callable,\n    *,\n    stderr: TextIO,\n    args: Sequence,\n    kwargs: dict,\n) -&gt; int:\n\"\"\"Run a function and return a exit code.\n\n    Arguments:\n        func: The function to run.\n        stderr: A file descriptor to write potential tracebacks.\n        args: Positional arguments passed to the function.\n        kwargs: Keyword arguments passed to the function.\n\n    Returns:\n        An exit code.\n    \"\"\"\n    try:\n        result = func(*args, **kwargs)\n    except SystemExit as exit:\n        if exit.code is None:\n            return 0\n        if isinstance(exit.code, int):\n            return exit.code\n        stderr.write(str(exit.code))\n        return 1\n    except Exception:  # noqa: BLE001\n        stderr.write(traceback.format_exc() + \"\\n\")\n        return 1\n\n    # if func was a lazy callable, recurse\n    if isinstance(result, LazyCallable):\n        return run_function_get_code(result, stderr=stderr, args=(), kwargs={})\n\n    # first check True and False\n    # because int(True) == 1 and int(False) == 0\n    if result is True:\n        return 0\n    if result is False:\n        return 1\n    try:\n        return int(result)\n    except (ValueError, TypeError):\n        if result is None or bool(result):\n            return 0\n        return 1\n</code></pre>"},{"location":"reference/failprint/types/","title":"types","text":"<p>Special types.</p> <p>Attributes:</p> Name Type Description <code>CmdType</code> <p>Type for a command.</p> <code>CmdFuncType</code> <p>Type for a command or function.</p>"},{"location":"coverage/","title":"Coverage report","text":""}]}