{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"failprint \u00a4 Run a command, print its output only if it fails. Tired of searching the quiet options of your programs to lighten up the output of your make check or make lint commands? Tired of finding out that standard output and error are mixed up in some of them? Simply run your command through failprint . If it succeeds, nothing is printed. If it fails, standard error is printed. Plus other configuration goodies Example \u00a4 Some tools output a lot of things. You don't want to see it when the command succeeds. Without failprint : poetry run bandit -s B404 -r src/ poetry run black --check $(PY_SRC) With failprint : poetry run failprint -- bandit -s B404 -r src/ poetry run failprint -- black --check $(PY_SRC) It's already better, no? Much more readable! And when everything passes, it's even better: Requirements \u00a4 failprint requires Python 3.6 or above. To install Python 3.6, I recommend using pyenv . # install pyenv git clone https://github.com/pyenv/pyenv ~/.pyenv # setup pyenv (you should also put these three lines in .bashrc or similar) export PATH = \" ${ HOME } /.pyenv/bin: ${ PATH } \" export PYENV_ROOT = \" ${ HOME } /.pyenv\" eval \" $( pyenv init - ) \" # install Python 3.6 pyenv install 3 .6.12 # make it available globally pyenv global system 3 .6.12 Installation \u00a4 With pip : python3.6 -m pip install failprint With pipx : python3.6 -m pip install --user pipx pipx install --python python3.6 failprint Usage \u00a4 usage: failprint [-h] [-f {custom,pretty,tap}] [-o {stdout,stderr,combine}] [-n NUMBER] [-t TITLE] COMMAND [COMMAND ...] positional arguments: COMMAND optional arguments: -h, --help show this help message and exit -f {custom,pretty,tap}, --format {custom,pretty,tap} Output format. Pass your own Jinja2 template as a string with '-f custom=TEMPLATE'. Available variables: title (command or title passed with -t), code (exit status), success (boolean), failure (boolean), n (command number passed with -n), output (command output). Available filters: indent (textwrap.indent). -o {stdout,stderr,combine}, --output {stdout,stderr,combine} Which output to use. Colors are supported with 'combine' only, unless the command has a 'force color' option. -n NUMBER, --number NUMBER Command number. Useful for the 'tap' format. -t TITLE, --title TITLE Command title. Default is the command itself.","title":"Overview"},{"location":"#failprint","text":"Run a command, print its output only if it fails. Tired of searching the quiet options of your programs to lighten up the output of your make check or make lint commands? Tired of finding out that standard output and error are mixed up in some of them? Simply run your command through failprint . If it succeeds, nothing is printed. If it fails, standard error is printed. Plus other configuration goodies","title":"failprint"},{"location":"#example","text":"Some tools output a lot of things. You don't want to see it when the command succeeds. Without failprint : poetry run bandit -s B404 -r src/ poetry run black --check $(PY_SRC) With failprint : poetry run failprint -- bandit -s B404 -r src/ poetry run failprint -- black --check $(PY_SRC) It's already better, no? Much more readable! And when everything passes, it's even better:","title":"Example"},{"location":"#requirements","text":"failprint requires Python 3.6 or above. To install Python 3.6, I recommend using pyenv . # install pyenv git clone https://github.com/pyenv/pyenv ~/.pyenv # setup pyenv (you should also put these three lines in .bashrc or similar) export PATH = \" ${ HOME } /.pyenv/bin: ${ PATH } \" export PYENV_ROOT = \" ${ HOME } /.pyenv\" eval \" $( pyenv init - ) \" # install Python 3.6 pyenv install 3 .6.12 # make it available globally pyenv global system 3 .6.12","title":"Requirements"},{"location":"#installation","text":"With pip : python3.6 -m pip install failprint With pipx : python3.6 -m pip install --user pipx pipx install --python python3.6 failprint","title":"Installation"},{"location":"#usage","text":"usage: failprint [-h] [-f {custom,pretty,tap}] [-o {stdout,stderr,combine}] [-n NUMBER] [-t TITLE] COMMAND [COMMAND ...] positional arguments: COMMAND optional arguments: -h, --help show this help message and exit -f {custom,pretty,tap}, --format {custom,pretty,tap} Output format. Pass your own Jinja2 template as a string with '-f custom=TEMPLATE'. Available variables: title (command or title passed with -t), code (exit status), success (boolean), failure (boolean), n (command number passed with -n), output (command output). Available filters: indent (textwrap.indent). -o {stdout,stderr,combine}, --output {stdout,stderr,combine} Which output to use. Colors are supported with 'combine' only, unless the command has a 'force color' option. -n NUMBER, --number NUMBER Command number. Useful for the 'tap' format. -t TITLE, --title TITLE Command title. Default is the command itself.","title":"Usage"},{"location":"changelog/","text":"Changelog \u00a4 All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning . 0.4.0 - 2020-09-25 \u00a4 Compare with 0.3.0 Features \u00a4 Add quiet option ( b676335 by Timoth\u00e9e Mazzucotelli). Add option to allow failure ( 79b3ae7 by Timoth\u00e9e Mazzucotelli). 0.3.0 - 2020-05-01 \u00a4 Compare with 0.2.0 Features \u00a4 Implement progress display for pretty format ( 7c244e2 by Timoth\u00e9e Mazzucotelli). 0.2.0 - 2020-04-28 \u00a4 Compare with 0.1.1 Features \u00a4 Add --no-pty option ( 5ba21e8 by Timoth\u00e9e Mazzucotelli). 0.1.1 - 2020-04-23 \u00a4 Compare with 0.1.0 Bug Fixes \u00a4 Fix default output type ( f720cf7 by Timoth\u00e9e Mazzucotelli). Fix environment variable name ( 526f4df by Timoth\u00e9e Mazzucotelli). 0.1.0 - 2020-04-23 \u00a4 Compare with first commit Features \u00a4 Support colors for combine format ( 3756dbd by Timoth\u00e9e Mazzucotelli). Initial commit ( 182af93 by Timoth\u00e9e Mazzucotelli).","title":"Changelog"},{"location":"changelog/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"changelog/#040-2020-09-25","text":"Compare with 0.3.0","title":"0.4.0 - 2020-09-25"},{"location":"changelog/#features","text":"Add quiet option ( b676335 by Timoth\u00e9e Mazzucotelli). Add option to allow failure ( 79b3ae7 by Timoth\u00e9e Mazzucotelli).","title":"Features"},{"location":"changelog/#030-2020-05-01","text":"Compare with 0.2.0","title":"0.3.0 - 2020-05-01"},{"location":"changelog/#features_1","text":"Implement progress display for pretty format ( 7c244e2 by Timoth\u00e9e Mazzucotelli).","title":"Features"},{"location":"changelog/#020-2020-04-28","text":"Compare with 0.1.1","title":"0.2.0 - 2020-04-28"},{"location":"changelog/#features_2","text":"Add --no-pty option ( 5ba21e8 by Timoth\u00e9e Mazzucotelli).","title":"Features"},{"location":"changelog/#011-2020-04-23","text":"Compare with 0.1.0","title":"0.1.1 - 2020-04-23"},{"location":"changelog/#bug-fixes","text":"Fix default output type ( f720cf7 by Timoth\u00e9e Mazzucotelli). Fix environment variable name ( 526f4df by Timoth\u00e9e Mazzucotelli).","title":"Bug Fixes"},{"location":"changelog/#010-2020-04-23","text":"Compare with first commit","title":"0.1.0 - 2020-04-23"},{"location":"changelog/#features_3","text":"Support colors for combine format ( 3756dbd by Timoth\u00e9e Mazzucotelli). Initial commit ( 182af93 by Timoth\u00e9e Mazzucotelli).","title":"Features"},{"location":"code_of_conduct/","text":"Contributor Covenant Code of Conduct \u00a4 Our Pledge \u00a4 In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards \u00a4 Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Our Responsibilities \u00a4 Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. Scope \u00a4 This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Enforcement \u00a4 Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at pawamoy@pm.me . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership. Attribution \u00a4 This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at http://contributor-covenant.org/version/1/4","title":"Code of Conduct"},{"location":"code_of_conduct/#contributor-covenant-code-of-conduct","text":"","title":"Contributor Covenant Code of Conduct"},{"location":"code_of_conduct/#our-pledge","text":"In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.","title":"Our Pledge"},{"location":"code_of_conduct/#our-standards","text":"Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"code_of_conduct/#our-responsibilities","text":"Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.","title":"Our Responsibilities"},{"location":"code_of_conduct/#scope","text":"This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.","title":"Scope"},{"location":"code_of_conduct/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at pawamoy@pm.me . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.","title":"Enforcement"},{"location":"code_of_conduct/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at http://contributor-covenant.org/version/1/4","title":"Attribution"},{"location":"contributing/","text":"Contributing \u00a4 Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. Environment setup \u00a4 Nothing easier! You just need two tools: Poetry and Invoke. You can install them with: python3 -m pip install --user pipx pipx install poetry pipx install invoke Now fork and clone the repository, then: cd failprint make setup That's it! You now have the dependencies installed. You can run the application with poetry run failprint [ARGS...] . Run make help to see all the available actions! Development \u00a4 As usual: create a new branch: git checkout -b feature-or-bugfix-name edit the code and/or the documentation If you updated the documentation or the project dependencies: run make docs-regen run make docs-serve , go to http://localhost:8000 and check that everything looks good Before committing: run make format to auto-format the code run make check to check everything (fix any warning) run make test to run the tests (fix any issue) follow our commit message convention If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review. Don't bother updating the changelog, we will take care of this. Commit message convention \u00a4 Commits messages must follow the Angular style : <type>[(scope)]: Subject [Body] Scope and body are optional. Type can be: build : About packaging, building wheels, etc. chore : About packaging or repo/files management. ci : About Continuous Integration. docs : About documentation. feat : New feature. fix : Bug fix. perf : About performance. refactor : Changes which are not features nor bug fixes. style : A change in code style/format. tests : About tests. Subject (and body) must be valid Markdown. If you write a body, please add issues references at the end: Body. References: #10, #11. Fixes #15. Pull requests guidelines \u00a4 Link to any related issue in the Pull Request message. During review, we recommend using fixups: # SHA is the SHA of the commit you want to fix git commit --fixup = SHA Once all the changes are approved, you can squash your commits: git rebase -i --autosquash master And force-push: git push -f If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging.","title":"Contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.","title":"Contributing"},{"location":"contributing/#environment-setup","text":"Nothing easier! You just need two tools: Poetry and Invoke. You can install them with: python3 -m pip install --user pipx pipx install poetry pipx install invoke Now fork and clone the repository, then: cd failprint make setup That's it! You now have the dependencies installed. You can run the application with poetry run failprint [ARGS...] . Run make help to see all the available actions!","title":"Environment setup"},{"location":"contributing/#development","text":"As usual: create a new branch: git checkout -b feature-or-bugfix-name edit the code and/or the documentation If you updated the documentation or the project dependencies: run make docs-regen run make docs-serve , go to http://localhost:8000 and check that everything looks good Before committing: run make format to auto-format the code run make check to check everything (fix any warning) run make test to run the tests (fix any issue) follow our commit message convention If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review. Don't bother updating the changelog, we will take care of this.","title":"Development"},{"location":"contributing/#commit-message-convention","text":"Commits messages must follow the Angular style : <type>[(scope)]: Subject [Body] Scope and body are optional. Type can be: build : About packaging, building wheels, etc. chore : About packaging or repo/files management. ci : About Continuous Integration. docs : About documentation. feat : New feature. fix : Bug fix. perf : About performance. refactor : Changes which are not features nor bug fixes. style : A change in code style/format. tests : About tests. Subject (and body) must be valid Markdown. If you write a body, please add issues references at the end: Body. References: #10, #11. Fixes #15.","title":"Commit message convention"},{"location":"contributing/#pull-requests-guidelines","text":"Link to any related issue in the Pull Request message. During review, we recommend using fixups: # SHA is the SHA of the commit you want to fix git commit --fixup = SHA Once all the changes are approved, you can squash your commits: git rebase -i --autosquash master And force-push: git push -f If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging.","title":"Pull requests guidelines"},{"location":"credits/","text":"Credits \u00a4 These projects were used to build failprint . Thank you! python | poetry | copier-poetry Direct dependencies \u00a4 ansimarkup | bandit | black | coverage | flake8 | flake8-bandit | flake8-black | flake8-builtins | flake8-comprehensions | flake8-docstrings | flake8-isort | flake8-tidy-imports | flake8-variables-names | git-changelog | ipython | isort | Jinja2 | jinja2-cli | mkdocs | mkdocs-material | mkdocstrings | mypy | ptyprocess | pytest | pytest-cov | pytest-sugar | pytest-xdist | requests | toml Indirect dependencies \u00a4 apipkg | appdirs | appnope | atomicwrites | attrs | backcall | beautifulsoup4 | certifi | chardet | click | colorama | decorator | entrypoints | execnet | flake8-polyfill | future | gitdb | GitPython | idna | importlib-metadata | ipython-genutils | jedi | joblib | livereload | lunr | Markdown | MarkupSafe | mccabe | mkdocs-material-extensions | more-itertools | mypy-extensions | nltk | packaging | parso | pathspec | pbr | pexpect | pickleshare | pluggy | prompt-toolkit | py | pycodestyle | pydocstyle | pyflakes | Pygments | pymdown-extensions | pyparsing | pytest-forked | pytkdocs | PyYAML | regex | six | smmap | snowballstemmer | soupsieve | stevedore | termcolor | testfixtures | tornado | tqdm | traitlets | typed-ast | typing-extensions | urllib3 | wcwidth | zipp More credits from the author","title":"Credits"},{"location":"credits/#credits","text":"These projects were used to build failprint . Thank you! python | poetry | copier-poetry","title":"Credits"},{"location":"credits/#direct-dependencies","text":"ansimarkup | bandit | black | coverage | flake8 | flake8-bandit | flake8-black | flake8-builtins | flake8-comprehensions | flake8-docstrings | flake8-isort | flake8-tidy-imports | flake8-variables-names | git-changelog | ipython | isort | Jinja2 | jinja2-cli | mkdocs | mkdocs-material | mkdocstrings | mypy | ptyprocess | pytest | pytest-cov | pytest-sugar | pytest-xdist | requests | toml","title":"Direct dependencies"},{"location":"credits/#indirect-dependencies","text":"apipkg | appdirs | appnope | atomicwrites | attrs | backcall | beautifulsoup4 | certifi | chardet | click | colorama | decorator | entrypoints | execnet | flake8-polyfill | future | gitdb | GitPython | idna | importlib-metadata | ipython-genutils | jedi | joblib | livereload | lunr | Markdown | MarkupSafe | mccabe | mkdocs-material-extensions | more-itertools | mypy-extensions | nltk | packaging | parso | pathspec | pbr | pexpect | pickleshare | pluggy | prompt-toolkit | py | pycodestyle | pydocstyle | pyflakes | Pygments | pymdown-extensions | pyparsing | pytest-forked | pytkdocs | PyYAML | regex | six | smmap | snowballstemmer | soupsieve | stevedore | termcolor | testfixtures | tornado | tqdm | traitlets | typed-ast | typing-extensions | urllib3 | wcwidth | zipp More credits from the author","title":"Indirect dependencies"},{"location":"reference/cli/","text":"\u00a4 Module that contains the command line application. Format \u00a4 Class to define a display format. __init__ ( self , template , progress_template = None , accept_ansi = True ) special \u00a4 Initialize the object. Parameters: Name Type Description Default template str The main template. required progress_template Optional[str] The template to show progress. None accept_ansi bool Whether to accept ANSI sequences. True Source code in failprint/cli.py def __init__ ( self , template : str , progress_template : Optional [ str ] = None , accept_ansi : bool = True ) -> None : \"\"\" Initialize the object. Arguments: template: The main template. progress_template: The template to show progress. accept_ansi: Whether to accept ANSI sequences. \"\"\" self . template = template self . progress_template = progress_template self . accept_ansi = accept_ansi Output \u00a4 An enum to store the different possible output types. accept_custom_format ( string ) \u00a4 Store the value in formats if it starts with custom. Parameters: Name Type Description Default string str A format name. required Returns: Type Description str The format name, or custom if it started with custom= . Source code in failprint/cli.py def accept_custom_format ( string : str ) -> str : \"\"\" Store the value in `formats` if it starts with custom. Arguments: string: A format name. Returns: The format name, or `custom` if it started with `custom=`. \"\"\" if string . startswith ( \"custom=\" ) and formats [ \"custom\" ] is None : formats [ \"custom\" ] = Format ( string [ 7 :]) return \"custom\" return string get_parser () \u00a4 Return the CLI argument parser. Returns: Type Description ArgumentParser An argparse parser. Source code in failprint/cli.py def get_parser () -> argparse . ArgumentParser : \"\"\" Return the CLI argument parser. Returns: An argparse parser. \"\"\" parser = argparse . ArgumentParser ( prog = \"failprint\" ) parser . add_argument ( \"-f\" , \"--format\" , choices = formats . keys (), type = accept_custom_format , default = None , help = \"Output format. Pass your own Jinja2 template as a string with '-f custom=TEMPLATE'. \" \"Available variables: title (command or title passed with -t), code (exit status), \" \"success (boolean), failure (boolean), n (command number passed with -n), \" \"output (command output). Available filters: indent (textwrap.indent).\" , ) parser . add_argument ( \"--no-pty\" , action = \"store_false\" , dest = \"use_pty\" , default = True , help = \"Disable the use of a pseudo-terminal. PTY doesn't allow programs to use standard input.\" , ) parser . add_argument ( \"-o\" , \"--output\" , choices = list ( Output ), type = Output , help = \"Which output to use. Colors are supported with 'combine' only, unless the command has a 'force color' option.\" , ) parser . add_argument ( \"-q\" , \"--quiet\" , action = \"store_true\" , dest = \"quiet\" , default = False , help = \"Don't print the command output, even if it failed.\" , ) parser . add_argument ( \"-z\" , \"--zero\" , \"--nofail\" , action = \"store_true\" , dest = \"nofail\" , default = False , help = \"Don't fail. Always return a success (0) exit code.\" , ) parser . add_argument ( \"-n\" , \"--number\" , type = int , default = 1 , help = \"Command number. Useful for the 'tap' format.\" ) parser . add_argument ( \"-t\" , \"--title\" , help = \"Command title. Default is the command itself.\" ) parser . add_argument ( \"COMMAND\" , nargs = \"+\" ) return parser main ( args = None ) \u00a4 Run the main program. This function is executed when you type failprint or python -m failprint . Parameters: Name Type Description Default args Optional[List[str]] Arguments passed from the command line. None Returns: Type Description int An exit code. Source code in failprint/cli.py def main ( args : Optional [ List [ str ]] = None ) -> int : \"\"\" Run the main program. This function is executed when you type `failprint` or `python -m failprint`. Arguments: args: Arguments passed from the command line. Returns: An exit code. \"\"\" parser = get_parser () options = parser . parse_args ( args ) return run ( options . COMMAND , number = options . number , output_type = options . output , title = options . title , fmt = options . format , use_pty = options . use_pty , nofail = options . nofail , quiet = options . quiet , ) printable_command ( cmd ) \u00a4 Rebuild a command line from system arguments. Parameters: Name Type Description Default cmd List[str] The command as a list of strings. required Returns: Type Description str A printable and shell-runnable command. Source code in failprint/cli.py def printable_command ( cmd : List [ str ]) -> str : # noqa: WPS231 (not that complex) \"\"\" Rebuild a command line from system arguments. Arguments: cmd: The command as a list of strings. Returns: A printable and shell-runnable command. \"\"\" parts = [] for part in cmd : if \" \" in part : has_double_quotes = '\"' in part has_single_quotes = \"'\" in part if has_double_quotes and not has_single_quotes : part = f \"' { part } '\" elif has_single_quotes and has_double_quotes : part = part . replace ( '\"' , r \" \\\" \" ) part = f '\" { part } \"' else : part = f '\" { part } \"' parts . append ( part ) return \" \" . join ( parts ) run ( cmd , number = 1 , output_type = None , title = None , fmt = None , use_pty = True , progress = True , nofail = False , quiet = False ) \u00a4 Run a command in a subprocess, and print its output if it fails. Parameters: Name Type Description Default cmd List[str] The command to run. required number int The command number. 1 output_type Optional[failprint.cli.Output] The type of output. None title Optional[str] The command title. None fmt Optional[str] The output format. None use_pty bool Whether to run in a PTY. True progress bool Whether to show progress. True nofail bool Whether to always succeed. False quiet bool Whether to not print the command output. False Returns: Type Description int The command exit code, or 0 if nofail is True. Source code in failprint/cli.py def run ( cmd : List [ str ], number : int = 1 , output_type : Optional [ Output ] = None , title : Optional [ str ] = None , fmt : Optional [ str ] = None , use_pty : bool = True , progress : bool = True , nofail : bool = False , quiet : bool = False , ) -> int : \"\"\" Run a command in a subprocess, and print its output if it fails. Arguments: cmd: The command to run. number: The command number. output_type: The type of output. title: The command title. fmt: The output format. use_pty: Whether to run in a PTY. progress: Whether to show progress. nofail: Whether to always succeed. quiet: Whether to not print the command output. Returns: The command exit code, or 0 if `nofail` is True. \"\"\" format_name : str = fmt or os . environ . get ( \"FAILPRINT_FORMAT\" , DEFAULT_FORMAT ) # type: ignore format_name = accept_custom_format ( format_name ) format_obj = formats . get ( format_name , formats [ DEFAULT_FORMAT ]) command = printable_command ( cmd ) env = Environment ( autoescape = False ) # noqa: S701 (no HTML: no need to escape) env . filters [ \"indent\" ] = textwrap . indent if progress and format_obj . progress_template : progress_template = env . from_string ( format_obj . progress_template ) ansiprint ( progress_template . render ({ \"title\" : title , \"command\" : command }), end = \" \\r \" ) if not format_obj . accept_ansi and use_pty : use_pty = False if output_type is None : output_type = Output . COMBINE if output_type == Output . COMBINE and use_pty : code , output = run_pty_subprocess ( cmd ) else : code , output = run_subprocess ( cmd , output_type ) template = env . from_string ( format_obj . template ) ansiprint ( template . render ( { \"title\" : title , \"command\" : command , \"code\" : code , \"success\" : code == 0 , \"failure\" : code != 0 , \"number\" : number , \"output\" : output , \"nofail\" : nofail , \"quiet\" : quiet , }, ), ) return 0 if nofail else code run_pty_subprocess ( cmd ) \u00a4 Run a command in a PTY subprocess. Parameters: Name Type Description Default cmd List[str] The command to run. required Returns: Type Description Tuple[int, str] The exit code and the command output. Source code in failprint/cli.py def run_pty_subprocess ( cmd : List [ str ]) -> Tuple [ int , str ]: \"\"\" Run a command in a PTY subprocess. Arguments: cmd: The command to run. Returns: The exit code and the command output. \"\"\" process = PtyProcessUnicode . spawn ( cmd ) pty_output = [] while True : try : pty_output . append ( process . read ()) except EOFError : break process . close () output = \"\" . join ( pty_output ) code = process . exitstatus return code , output run_subprocess ( cmd , output_type ) \u00a4 Run a command in a subprocess. Parameters: Name Type Description Default cmd List[str] The command to run. required output_type Output The type of output. required Returns: Type Description Tuple[int, str] The exit code and the command output. Source code in failprint/cli.py def run_subprocess ( cmd : List [ str ], output_type : Output ) -> Tuple [ int , str ]: \"\"\" Run a command in a subprocess. Arguments: cmd: The command to run. output_type: The type of output. Returns: The exit code and the command output. \"\"\" stdout_opt = subprocess . PIPE if output_type == Output . COMBINE : stderr_opt = subprocess . STDOUT else : stderr_opt = subprocess . PIPE process = subprocess . Popen ( # noqa: S603 (we trust the input) cmd , stdin = sys . stdin , stdout = stdout_opt , stderr = stderr_opt , ) stdout , stderr = process . communicate () if output_type == Output . STDERR : output = stderr . decode ( \"utf8\" ) else : output = stdout . decode ( \"utf8\" ) code = process . returncode return code , output","title":"cli.py"},{"location":"reference/cli/#failprint.cli","text":"Module that contains the command line application.","title":"failprint.cli"},{"location":"reference/cli/#failprint.cli.Format","text":"Class to define a display format.","title":"Format"},{"location":"reference/cli/#failprint.cli.Format.__init__","text":"Initialize the object. Parameters: Name Type Description Default template str The main template. required progress_template Optional[str] The template to show progress. None accept_ansi bool Whether to accept ANSI sequences. True Source code in failprint/cli.py def __init__ ( self , template : str , progress_template : Optional [ str ] = None , accept_ansi : bool = True ) -> None : \"\"\" Initialize the object. Arguments: template: The main template. progress_template: The template to show progress. accept_ansi: Whether to accept ANSI sequences. \"\"\" self . template = template self . progress_template = progress_template self . accept_ansi = accept_ansi","title":"__init__()"},{"location":"reference/cli/#failprint.cli.Output","text":"An enum to store the different possible output types.","title":"Output"},{"location":"reference/cli/#failprint.cli.accept_custom_format","text":"Store the value in formats if it starts with custom. Parameters: Name Type Description Default string str A format name. required Returns: Type Description str The format name, or custom if it started with custom= . Source code in failprint/cli.py def accept_custom_format ( string : str ) -> str : \"\"\" Store the value in `formats` if it starts with custom. Arguments: string: A format name. Returns: The format name, or `custom` if it started with `custom=`. \"\"\" if string . startswith ( \"custom=\" ) and formats [ \"custom\" ] is None : formats [ \"custom\" ] = Format ( string [ 7 :]) return \"custom\" return string","title":"accept_custom_format()"},{"location":"reference/cli/#failprint.cli.get_parser","text":"Return the CLI argument parser. Returns: Type Description ArgumentParser An argparse parser. Source code in failprint/cli.py def get_parser () -> argparse . ArgumentParser : \"\"\" Return the CLI argument parser. Returns: An argparse parser. \"\"\" parser = argparse . ArgumentParser ( prog = \"failprint\" ) parser . add_argument ( \"-f\" , \"--format\" , choices = formats . keys (), type = accept_custom_format , default = None , help = \"Output format. Pass your own Jinja2 template as a string with '-f custom=TEMPLATE'. \" \"Available variables: title (command or title passed with -t), code (exit status), \" \"success (boolean), failure (boolean), n (command number passed with -n), \" \"output (command output). Available filters: indent (textwrap.indent).\" , ) parser . add_argument ( \"--no-pty\" , action = \"store_false\" , dest = \"use_pty\" , default = True , help = \"Disable the use of a pseudo-terminal. PTY doesn't allow programs to use standard input.\" , ) parser . add_argument ( \"-o\" , \"--output\" , choices = list ( Output ), type = Output , help = \"Which output to use. Colors are supported with 'combine' only, unless the command has a 'force color' option.\" , ) parser . add_argument ( \"-q\" , \"--quiet\" , action = \"store_true\" , dest = \"quiet\" , default = False , help = \"Don't print the command output, even if it failed.\" , ) parser . add_argument ( \"-z\" , \"--zero\" , \"--nofail\" , action = \"store_true\" , dest = \"nofail\" , default = False , help = \"Don't fail. Always return a success (0) exit code.\" , ) parser . add_argument ( \"-n\" , \"--number\" , type = int , default = 1 , help = \"Command number. Useful for the 'tap' format.\" ) parser . add_argument ( \"-t\" , \"--title\" , help = \"Command title. Default is the command itself.\" ) parser . add_argument ( \"COMMAND\" , nargs = \"+\" ) return parser","title":"get_parser()"},{"location":"reference/cli/#failprint.cli.main","text":"Run the main program. This function is executed when you type failprint or python -m failprint . Parameters: Name Type Description Default args Optional[List[str]] Arguments passed from the command line. None Returns: Type Description int An exit code. Source code in failprint/cli.py def main ( args : Optional [ List [ str ]] = None ) -> int : \"\"\" Run the main program. This function is executed when you type `failprint` or `python -m failprint`. Arguments: args: Arguments passed from the command line. Returns: An exit code. \"\"\" parser = get_parser () options = parser . parse_args ( args ) return run ( options . COMMAND , number = options . number , output_type = options . output , title = options . title , fmt = options . format , use_pty = options . use_pty , nofail = options . nofail , quiet = options . quiet , )","title":"main()"},{"location":"reference/cli/#failprint.cli.printable_command","text":"Rebuild a command line from system arguments. Parameters: Name Type Description Default cmd List[str] The command as a list of strings. required Returns: Type Description str A printable and shell-runnable command. Source code in failprint/cli.py def printable_command ( cmd : List [ str ]) -> str : # noqa: WPS231 (not that complex) \"\"\" Rebuild a command line from system arguments. Arguments: cmd: The command as a list of strings. Returns: A printable and shell-runnable command. \"\"\" parts = [] for part in cmd : if \" \" in part : has_double_quotes = '\"' in part has_single_quotes = \"'\" in part if has_double_quotes and not has_single_quotes : part = f \"' { part } '\" elif has_single_quotes and has_double_quotes : part = part . replace ( '\"' , r \" \\\" \" ) part = f '\" { part } \"' else : part = f '\" { part } \"' parts . append ( part ) return \" \" . join ( parts )","title":"printable_command()"},{"location":"reference/cli/#failprint.cli.run","text":"Run a command in a subprocess, and print its output if it fails. Parameters: Name Type Description Default cmd List[str] The command to run. required number int The command number. 1 output_type Optional[failprint.cli.Output] The type of output. None title Optional[str] The command title. None fmt Optional[str] The output format. None use_pty bool Whether to run in a PTY. True progress bool Whether to show progress. True nofail bool Whether to always succeed. False quiet bool Whether to not print the command output. False Returns: Type Description int The command exit code, or 0 if nofail is True. Source code in failprint/cli.py def run ( cmd : List [ str ], number : int = 1 , output_type : Optional [ Output ] = None , title : Optional [ str ] = None , fmt : Optional [ str ] = None , use_pty : bool = True , progress : bool = True , nofail : bool = False , quiet : bool = False , ) -> int : \"\"\" Run a command in a subprocess, and print its output if it fails. Arguments: cmd: The command to run. number: The command number. output_type: The type of output. title: The command title. fmt: The output format. use_pty: Whether to run in a PTY. progress: Whether to show progress. nofail: Whether to always succeed. quiet: Whether to not print the command output. Returns: The command exit code, or 0 if `nofail` is True. \"\"\" format_name : str = fmt or os . environ . get ( \"FAILPRINT_FORMAT\" , DEFAULT_FORMAT ) # type: ignore format_name = accept_custom_format ( format_name ) format_obj = formats . get ( format_name , formats [ DEFAULT_FORMAT ]) command = printable_command ( cmd ) env = Environment ( autoescape = False ) # noqa: S701 (no HTML: no need to escape) env . filters [ \"indent\" ] = textwrap . indent if progress and format_obj . progress_template : progress_template = env . from_string ( format_obj . progress_template ) ansiprint ( progress_template . render ({ \"title\" : title , \"command\" : command }), end = \" \\r \" ) if not format_obj . accept_ansi and use_pty : use_pty = False if output_type is None : output_type = Output . COMBINE if output_type == Output . COMBINE and use_pty : code , output = run_pty_subprocess ( cmd ) else : code , output = run_subprocess ( cmd , output_type ) template = env . from_string ( format_obj . template ) ansiprint ( template . render ( { \"title\" : title , \"command\" : command , \"code\" : code , \"success\" : code == 0 , \"failure\" : code != 0 , \"number\" : number , \"output\" : output , \"nofail\" : nofail , \"quiet\" : quiet , }, ), ) return 0 if nofail else code","title":"run()"},{"location":"reference/cli/#failprint.cli.run_pty_subprocess","text":"Run a command in a PTY subprocess. Parameters: Name Type Description Default cmd List[str] The command to run. required Returns: Type Description Tuple[int, str] The exit code and the command output. Source code in failprint/cli.py def run_pty_subprocess ( cmd : List [ str ]) -> Tuple [ int , str ]: \"\"\" Run a command in a PTY subprocess. Arguments: cmd: The command to run. Returns: The exit code and the command output. \"\"\" process = PtyProcessUnicode . spawn ( cmd ) pty_output = [] while True : try : pty_output . append ( process . read ()) except EOFError : break process . close () output = \"\" . join ( pty_output ) code = process . exitstatus return code , output","title":"run_pty_subprocess()"},{"location":"reference/cli/#failprint.cli.run_subprocess","text":"Run a command in a subprocess. Parameters: Name Type Description Default cmd List[str] The command to run. required output_type Output The type of output. required Returns: Type Description Tuple[int, str] The exit code and the command output. Source code in failprint/cli.py def run_subprocess ( cmd : List [ str ], output_type : Output ) -> Tuple [ int , str ]: \"\"\" Run a command in a subprocess. Arguments: cmd: The command to run. output_type: The type of output. Returns: The exit code and the command output. \"\"\" stdout_opt = subprocess . PIPE if output_type == Output . COMBINE : stderr_opt = subprocess . STDOUT else : stderr_opt = subprocess . PIPE process = subprocess . Popen ( # noqa: S603 (we trust the input) cmd , stdin = sys . stdin , stdout = stdout_opt , stderr = stderr_opt , ) stdout , stderr = process . communicate () if output_type == Output . STDERR : output = stderr . decode ( \"utf8\" ) else : output = stdout . decode ( \"utf8\" ) code = process . returncode return code , output","title":"run_subprocess()"}]}