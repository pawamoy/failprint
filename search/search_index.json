{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"failprint \u00a4 Run a command, print its output only if it fails. Tired of searching the quiet options of your programs to lighten up the output of your make check or make lint commands? Tired of finding out that standard output and error are mixed up in some of them? Simply run your command through failprint . If it succeeds, nothing is printed. If it fails, standard error is printed. Plus other configuration goodies Example \u00a4 Some tools output a lot of things. You don't want to see it when the command succeeds. Without failprint : poetry run bandit -s B404 -r src/ poetry run black --check $(PY_SRC) With failprint : poetry run failprint -- bandit -s B404 -r src/ poetry run failprint -- black --check $(PY_SRC) It's already better, no? Much more readable! And when everything passes, it's even better: Requirements \u00a4 failprint requires Python 3.6 or above. To install Python 3.6, I recommend using pyenv . # install pyenv git clone https://github.com/pyenv/pyenv ~/.pyenv # setup pyenv (you should also put these three lines in .bashrc or similar) export PATH = \" ${ HOME } /.pyenv/bin: ${ PATH } \" export PYENV_ROOT = \" ${ HOME } /.pyenv\" eval \" $( pyenv init - ) \" # install Python 3.6 pyenv install 3 .6.12 # make it available globally pyenv global system 3 .6.12 Installation \u00a4 With pip : python3.6 -m pip install failprint With pipx : python3.6 -m pip install --user pipx pipx install --python python3.6 failprint Usage \u00a4 usage: failprint [-h] [-f {custom,pretty,tap}] [-o {stdout,stderr,combine}] [-n NUMBER] [-t TITLE] COMMAND [COMMAND ...] positional arguments: COMMAND optional arguments: -h, --help show this help message and exit -f {custom,pretty,tap}, --format {custom,pretty,tap} Output format. Pass your own Jinja2 template as a string with '-f custom=TEMPLATE'. Available variables: title (command or title passed with -t), code (exit status), success (boolean), failure (boolean), n (command number passed with -n), output (command output). Available filters: indent (textwrap.indent). -o {stdout,stderr,combine}, --output {stdout,stderr,combine} Which output to use. Colors are supported with 'combine' only, unless the command has a 'force color' option. -n NUMBER, --number NUMBER Command number. Useful for the 'tap' format. -t TITLE, --title TITLE Command title. Default is the command itself.","title":"Overview"},{"location":"#failprint","text":"Run a command, print its output only if it fails. Tired of searching the quiet options of your programs to lighten up the output of your make check or make lint commands? Tired of finding out that standard output and error are mixed up in some of them? Simply run your command through failprint . If it succeeds, nothing is printed. If it fails, standard error is printed. Plus other configuration goodies","title":"failprint"},{"location":"#example","text":"Some tools output a lot of things. You don't want to see it when the command succeeds. Without failprint : poetry run bandit -s B404 -r src/ poetry run black --check $(PY_SRC) With failprint : poetry run failprint -- bandit -s B404 -r src/ poetry run failprint -- black --check $(PY_SRC) It's already better, no? Much more readable! And when everything passes, it's even better:","title":"Example"},{"location":"#requirements","text":"failprint requires Python 3.6 or above. To install Python 3.6, I recommend using pyenv . # install pyenv git clone https://github.com/pyenv/pyenv ~/.pyenv # setup pyenv (you should also put these three lines in .bashrc or similar) export PATH = \" ${ HOME } /.pyenv/bin: ${ PATH } \" export PYENV_ROOT = \" ${ HOME } /.pyenv\" eval \" $( pyenv init - ) \" # install Python 3.6 pyenv install 3 .6.12 # make it available globally pyenv global system 3 .6.12","title":"Requirements"},{"location":"#installation","text":"With pip : python3.6 -m pip install failprint With pipx : python3.6 -m pip install --user pipx pipx install --python python3.6 failprint","title":"Installation"},{"location":"#usage","text":"usage: failprint [-h] [-f {custom,pretty,tap}] [-o {stdout,stderr,combine}] [-n NUMBER] [-t TITLE] COMMAND [COMMAND ...] positional arguments: COMMAND optional arguments: -h, --help show this help message and exit -f {custom,pretty,tap}, --format {custom,pretty,tap} Output format. Pass your own Jinja2 template as a string with '-f custom=TEMPLATE'. Available variables: title (command or title passed with -t), code (exit status), success (boolean), failure (boolean), n (command number passed with -n), output (command output). Available filters: indent (textwrap.indent). -o {stdout,stderr,combine}, --output {stdout,stderr,combine} Which output to use. Colors are supported with 'combine' only, unless the command has a 'force color' option. -n NUMBER, --number NUMBER Command number. Useful for the 'tap' format. -t TITLE, --title TITLE Command title. Default is the command itself.","title":"Usage"},{"location":"changelog/","text":"Changelog \u00a4 All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning . 0.5.1 - 2020-10-04 \u00a4 Compare with 0.5.0 Bug Fixes \u00a4 Fix progress parser argument ( d5fe999 by Timoth\u00e9e Mazzucotelli). 0.5.0 - 2020-10-04 \u00a4 Compare with 0.4.1 Bug Fixes \u00a4 Use which to find exec path on Windows ( 5327b0c by Timoth\u00e9e Mazzucotelli). Fix quoting when running as shell command ( 0f11995 by Timoth\u00e9e Mazzucotelli). Run with shell=True on Windows ( 5e97141 by Timoth\u00e9e Mazzucotelli). Features \u00a4 Refactor and add features ( 22a5e8d by Timoth\u00e9e Mazzucotelli). Add ability to run a function or callable Add nocapture output type Add silent option to API Accept None as truthful function result Add silent CLI flag Add no progress CLI flag 0.4.1 - 2020-09-29 \u00a4 Compare with 0.4.0 Bug Fixes \u00a4 Don't crash on Windows ( aaa2673 by Timoth\u00e9e Mazzucotelli). 0.4.0 - 2020-09-25 \u00a4 Compare with 0.3.0 Features \u00a4 Add quiet option ( b676335 by Timoth\u00e9e Mazzucotelli). Add option to allow failure ( 79b3ae7 by Timoth\u00e9e Mazzucotelli). 0.3.0 - 2020-05-01 \u00a4 Compare with 0.2.0 Features \u00a4 Implement progress display for pretty format ( 7c244e2 by Timoth\u00e9e Mazzucotelli). 0.2.0 - 2020-04-28 \u00a4 Compare with 0.1.1 Features \u00a4 Add --no-pty option ( 5ba21e8 by Timoth\u00e9e Mazzucotelli). 0.1.1 - 2020-04-23 \u00a4 Compare with 0.1.0 Bug Fixes \u00a4 Fix default output type ( f720cf7 by Timoth\u00e9e Mazzucotelli). Fix environment variable name ( 526f4df by Timoth\u00e9e Mazzucotelli). 0.1.0 - 2020-04-23 \u00a4 Compare with first commit Features \u00a4 Support colors for combine format ( 3756dbd by Timoth\u00e9e Mazzucotelli). Initial commit ( 182af93 by Timoth\u00e9e Mazzucotelli).","title":"Changelog"},{"location":"changelog/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"changelog/#051-2020-10-04","text":"Compare with 0.5.0","title":"0.5.1 - 2020-10-04"},{"location":"changelog/#bug-fixes","text":"Fix progress parser argument ( d5fe999 by Timoth\u00e9e Mazzucotelli).","title":"Bug Fixes"},{"location":"changelog/#050-2020-10-04","text":"Compare with 0.4.1","title":"0.5.0 - 2020-10-04"},{"location":"changelog/#bug-fixes_1","text":"Use which to find exec path on Windows ( 5327b0c by Timoth\u00e9e Mazzucotelli). Fix quoting when running as shell command ( 0f11995 by Timoth\u00e9e Mazzucotelli). Run with shell=True on Windows ( 5e97141 by Timoth\u00e9e Mazzucotelli).","title":"Bug Fixes"},{"location":"changelog/#features","text":"Refactor and add features ( 22a5e8d by Timoth\u00e9e Mazzucotelli). Add ability to run a function or callable Add nocapture output type Add silent option to API Accept None as truthful function result Add silent CLI flag Add no progress CLI flag","title":"Features"},{"location":"changelog/#041-2020-09-29","text":"Compare with 0.4.0","title":"0.4.1 - 2020-09-29"},{"location":"changelog/#bug-fixes_2","text":"Don't crash on Windows ( aaa2673 by Timoth\u00e9e Mazzucotelli).","title":"Bug Fixes"},{"location":"changelog/#040-2020-09-25","text":"Compare with 0.3.0","title":"0.4.0 - 2020-09-25"},{"location":"changelog/#features_1","text":"Add quiet option ( b676335 by Timoth\u00e9e Mazzucotelli). Add option to allow failure ( 79b3ae7 by Timoth\u00e9e Mazzucotelli).","title":"Features"},{"location":"changelog/#030-2020-05-01","text":"Compare with 0.2.0","title":"0.3.0 - 2020-05-01"},{"location":"changelog/#features_2","text":"Implement progress display for pretty format ( 7c244e2 by Timoth\u00e9e Mazzucotelli).","title":"Features"},{"location":"changelog/#020-2020-04-28","text":"Compare with 0.1.1","title":"0.2.0 - 2020-04-28"},{"location":"changelog/#features_3","text":"Add --no-pty option ( 5ba21e8 by Timoth\u00e9e Mazzucotelli).","title":"Features"},{"location":"changelog/#011-2020-04-23","text":"Compare with 0.1.0","title":"0.1.1 - 2020-04-23"},{"location":"changelog/#bug-fixes_3","text":"Fix default output type ( f720cf7 by Timoth\u00e9e Mazzucotelli). Fix environment variable name ( 526f4df by Timoth\u00e9e Mazzucotelli).","title":"Bug Fixes"},{"location":"changelog/#010-2020-04-23","text":"Compare with first commit","title":"0.1.0 - 2020-04-23"},{"location":"changelog/#features_4","text":"Support colors for combine format ( 3756dbd by Timoth\u00e9e Mazzucotelli). Initial commit ( 182af93 by Timoth\u00e9e Mazzucotelli).","title":"Features"},{"location":"code_of_conduct/","text":"Contributor Covenant Code of Conduct \u00a4 Our Pledge \u00a4 In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards \u00a4 Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Our Responsibilities \u00a4 Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. Scope \u00a4 This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Enforcement \u00a4 Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at pawamoy@pm.me . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership. Attribution \u00a4 This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at http://contributor-covenant.org/version/1/4","title":"Code of Conduct"},{"location":"code_of_conduct/#contributor-covenant-code-of-conduct","text":"","title":"Contributor Covenant Code of Conduct"},{"location":"code_of_conduct/#our-pledge","text":"In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.","title":"Our Pledge"},{"location":"code_of_conduct/#our-standards","text":"Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"code_of_conduct/#our-responsibilities","text":"Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.","title":"Our Responsibilities"},{"location":"code_of_conduct/#scope","text":"This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.","title":"Scope"},{"location":"code_of_conduct/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at pawamoy@pm.me . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.","title":"Enforcement"},{"location":"code_of_conduct/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at http://contributor-covenant.org/version/1/4","title":"Attribution"},{"location":"contributing/","text":"Contributing \u00a4 Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. Environment setup \u00a4 Nothing easier! Fork and clone the repository, then: cd failprint make setup Note If it fails for some reason, you'll need to install these tools manually: Poetry and Invoke . You can install them with: python3 -m pip install --user pipx pipx install poetry pipx install invoke Now you can try running make setup again, or simply poetry install . You now have the dependencies installed. You can run the application with poetry run failprint [ARGS...] . Run make help to see all the available actions! Tasks \u00a4 This project uses Invoke to run tasks. A Makefile is also provided. The Makefile will try to run the task on multiple Python versions. If for some reason you don't want to run the task on multiple Python versions, you can do one of the following: export PYTHON_VERSIONS= : this will run the task with only the current Python version run the task directly with poetry run invoke TASK , or invoke TASK if the environment was already activated through poetry shell The Makefile detects if the Poetry environment is activated, so make will work the same with the virtualenv activated or not. Development \u00a4 As usual: create a new branch: git checkout -b feature-or-bugfix-name edit the code and/or the documentation If you updated the documentation or the project dependencies: run make docs-regen run make docs-serve , go to http://localhost:8000 and check that everything looks good Before committing: run make format to auto-format the code run make check to check everything (fix any warning) run make test to run the tests (fix any issue) follow our commit message convention If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review. Don't bother updating the changelog, we will take care of this. Commit message convention \u00a4 Commits messages must follow the Angular style : <type>[(scope)]: Subject [Body] Scope and body are optional. Type can be: build : About packaging, building wheels, etc. chore : About packaging or repo/files management. ci : About Continuous Integration. docs : About documentation. feat : New feature. fix : Bug fix. perf : About performance. refactor : Changes which are not features nor bug fixes. style : A change in code style/format. tests : About tests. Subject (and body) must be valid Markdown. If you write a body, please add issues references at the end: Body. References: #10, #11. Fixes #15. Pull requests guidelines \u00a4 Link to any related issue in the Pull Request message. During review, we recommend using fixups: # SHA is the SHA of the commit you want to fix git commit --fixup = SHA Once all the changes are approved, you can squash your commits: git rebase -i --autosquash master And force-push: git push -f If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging.","title":"Contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.","title":"Contributing"},{"location":"contributing/#environment-setup","text":"Nothing easier! Fork and clone the repository, then: cd failprint make setup Note If it fails for some reason, you'll need to install these tools manually: Poetry and Invoke . You can install them with: python3 -m pip install --user pipx pipx install poetry pipx install invoke Now you can try running make setup again, or simply poetry install . You now have the dependencies installed. You can run the application with poetry run failprint [ARGS...] . Run make help to see all the available actions!","title":"Environment setup"},{"location":"contributing/#tasks","text":"This project uses Invoke to run tasks. A Makefile is also provided. The Makefile will try to run the task on multiple Python versions. If for some reason you don't want to run the task on multiple Python versions, you can do one of the following: export PYTHON_VERSIONS= : this will run the task with only the current Python version run the task directly with poetry run invoke TASK , or invoke TASK if the environment was already activated through poetry shell The Makefile detects if the Poetry environment is activated, so make will work the same with the virtualenv activated or not.","title":"Tasks"},{"location":"contributing/#development","text":"As usual: create a new branch: git checkout -b feature-or-bugfix-name edit the code and/or the documentation If you updated the documentation or the project dependencies: run make docs-regen run make docs-serve , go to http://localhost:8000 and check that everything looks good Before committing: run make format to auto-format the code run make check to check everything (fix any warning) run make test to run the tests (fix any issue) follow our commit message convention If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review. Don't bother updating the changelog, we will take care of this.","title":"Development"},{"location":"contributing/#commit-message-convention","text":"Commits messages must follow the Angular style : <type>[(scope)]: Subject [Body] Scope and body are optional. Type can be: build : About packaging, building wheels, etc. chore : About packaging or repo/files management. ci : About Continuous Integration. docs : About documentation. feat : New feature. fix : Bug fix. perf : About performance. refactor : Changes which are not features nor bug fixes. style : A change in code style/format. tests : About tests. Subject (and body) must be valid Markdown. If you write a body, please add issues references at the end: Body. References: #10, #11. Fixes #15.","title":"Commit message convention"},{"location":"contributing/#pull-requests-guidelines","text":"Link to any related issue in the Pull Request message. During review, we recommend using fixups: # SHA is the SHA of the commit you want to fix git commit --fixup = SHA Once all the changes are approved, you can squash your commits: git rebase -i --autosquash master And force-push: git push -f If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging.","title":"Pull requests guidelines"},{"location":"credits/","text":"Credits \u00a4 These projects were used to build failprint . Thank you! python | poetry | copier-poetry Direct dependencies \u00a4 ansimarkup | autoflake | black | duty | flake8-black | flake8-builtins | flake8-pytest-style | flake8-tidy-imports | flake8-variables-names | flakehell | git-changelog | httpx | ipython | isort | Jinja2 | jinja2-cli | mkdocs | mkdocs-material | mkdocstrings | mypy | ptyprocess | pytest | pytest-cov | pytest-randomly | pytest-sugar | pytest-xdist | toml | wemake-python-styleguide | wrapt Indirect dependencies \u00a4 apipkg | appdirs | appnope | astor | astroid | atomicwrites | attrs | backcall | bandit | beautifulsoup4 | certifi | chardet | click | colorama | contextvars | coverage | darglint | dataclasses | decorator | docutils | entrypoints | eradicate | execnet | flake8 | flake8-bandit | flake8-broken-line | flake8-bugbear | flake8-commas | flake8-comprehensions | flake8-debugger | flake8-docstrings | flake8-eradicate | flake8-isort | flake8-plugin-utils | flake8-polyfill | flake8-quotes | flake8-rst-docstrings | flake8-string-format | future | gitdb | GitPython | h11 | httpcore | idna | immutables | importlib-metadata | iniconfig | ipython-genutils | jedi | joblib | lazy-object-proxy | livereload | lunr | Markdown | MarkupSafe | mccabe | mkdocs-material-extensions | mypy-extensions | nltk | packaging | parso | pathspec | pbr | pep8-naming | pexpect | pickleshare | pluggy | prompt-toolkit | py | pycodestyle | pydocstyle | pyflakes | Pygments | pylint | pymdown-extensions | pyparsing | pytest-forked | pytkdocs | PyYAML | regex | restructuredtext-lint | rfc3986 | six | smmap | sniffio | snowballstemmer | soupsieve | stevedore | termcolor | testfixtures | tornado | tqdm | traitlets | typed-ast | typing-extensions | urllib3 | wcwidth | zipp More credits from the author","title":"Credits"},{"location":"credits/#credits","text":"These projects were used to build failprint . Thank you! python | poetry | copier-poetry","title":"Credits"},{"location":"credits/#direct-dependencies","text":"ansimarkup | autoflake | black | duty | flake8-black | flake8-builtins | flake8-pytest-style | flake8-tidy-imports | flake8-variables-names | flakehell | git-changelog | httpx | ipython | isort | Jinja2 | jinja2-cli | mkdocs | mkdocs-material | mkdocstrings | mypy | ptyprocess | pytest | pytest-cov | pytest-randomly | pytest-sugar | pytest-xdist | toml | wemake-python-styleguide | wrapt","title":"Direct dependencies"},{"location":"credits/#indirect-dependencies","text":"apipkg | appdirs | appnope | astor | astroid | atomicwrites | attrs | backcall | bandit | beautifulsoup4 | certifi | chardet | click | colorama | contextvars | coverage | darglint | dataclasses | decorator | docutils | entrypoints | eradicate | execnet | flake8 | flake8-bandit | flake8-broken-line | flake8-bugbear | flake8-commas | flake8-comprehensions | flake8-debugger | flake8-docstrings | flake8-eradicate | flake8-isort | flake8-plugin-utils | flake8-polyfill | flake8-quotes | flake8-rst-docstrings | flake8-string-format | future | gitdb | GitPython | h11 | httpcore | idna | immutables | importlib-metadata | iniconfig | ipython-genutils | jedi | joblib | lazy-object-proxy | livereload | lunr | Markdown | MarkupSafe | mccabe | mkdocs-material-extensions | mypy-extensions | nltk | packaging | parso | pathspec | pbr | pep8-naming | pexpect | pickleshare | pluggy | prompt-toolkit | py | pycodestyle | pydocstyle | pyflakes | Pygments | pylint | pymdown-extensions | pyparsing | pytest-forked | pytkdocs | PyYAML | regex | restructuredtext-lint | rfc3986 | six | smmap | sniffio | snowballstemmer | soupsieve | stevedore | termcolor | testfixtures | tornado | tqdm | traitlets | typed-ast | typing-extensions | urllib3 | wcwidth | zipp More credits from the author","title":"Indirect dependencies"},{"location":"reference/cli/","text":"\u00a4 Module that contains the command line application. get_parser () \u00a4 Return the CLI argument parser. Returns: Type Description ArgumentParser An argparse parser. Source code in failprint/cli.py def get_parser () -> argparse . ArgumentParser : \"\"\" Return the CLI argument parser. Returns: An argparse parser. \"\"\" parser = argparse . ArgumentParser ( prog = \"failprint\" ) parser . add_argument ( \"-f\" , \"--format\" , choices = formats . keys (), type = accept_custom_format , default = None , help = \"Output format. Pass your own Jinja2 template as a string with '-f custom=TEMPLATE'. \" \"Available variables: title (command or title passed with -t), code (exit status), \" \"success (boolean), failure (boolean), n (command number passed with -n), \" \"output (command output). Available filters: indent (textwrap.indent).\" , ) parser . add_argument ( \"--no-pty\" , action = \"store_false\" , dest = \"pty\" , default = True , help = \"Disable the use of a pseudo-terminal. PTY doesn't allow programs to use standard input.\" , ) parser . add_argument ( \"--no-progress\" , action = \"store_false\" , dest = \"progress\" , default = True , help = \"Don't print any progress while running a command.\" , ) parser . add_argument ( \"-o\" , \"--output\" , choices = list ( Output ), type = Output , help = \"Which output to use. Colors are supported with 'combine' only, unless the command has a 'force color' option.\" , ) parser . add_argument ( \"-q\" , \"--quiet\" , action = \"store_true\" , dest = \"quiet\" , default = False , help = \"Don't print the command output, even if it failed.\" , ) parser . add_argument ( \"-s\" , \"--silent\" , action = \"store_true\" , dest = \"silent\" , default = False , help = \"Don't print anything.\" , ) parser . add_argument ( \"-z\" , \"--zero\" , \"--nofail\" , action = \"store_true\" , dest = \"nofail\" , default = False , help = \"Don't fail. Always return a success (0) exit code.\" , ) parser . add_argument ( \"-n\" , \"--number\" , type = int , default = 1 , help = \"Command number. Useful for the 'tap' format.\" ) parser . add_argument ( \"-t\" , \"--title\" , help = \"Command title. Default is the command itself.\" ) parser . add_argument ( \"COMMAND\" , nargs = \"+\" ) return parser main ( args = None ) \u00a4 Run the main program. This function is executed when you type failprint or python -m failprint . Parameters: Name Type Description Default args Optional[List[str]] Arguments passed from the command line. None Returns: Type Description int An exit code. Source code in failprint/cli.py def main ( args : Optional [ List [ str ]] = None ) -> int : \"\"\" Run the main program. This function is executed when you type `failprint` or `python -m failprint`. Arguments: args: Arguments passed from the command line. Returns: An exit code. \"\"\" parser = get_parser () options = parser . parse_args ( args ) return run ( options . COMMAND , number = options . number , output_type = options . output , title = options . title , fmt = options . format , pty = options . pty , nofail = options . nofail , quiet = options . quiet , silent = options . silent , progress = options . progress , )","title":"cli.py"},{"location":"reference/cli/#failprint.cli","text":"Module that contains the command line application.","title":"failprint.cli"},{"location":"reference/cli/#failprint.cli.get_parser","text":"Return the CLI argument parser. Returns: Type Description ArgumentParser An argparse parser. Source code in failprint/cli.py def get_parser () -> argparse . ArgumentParser : \"\"\" Return the CLI argument parser. Returns: An argparse parser. \"\"\" parser = argparse . ArgumentParser ( prog = \"failprint\" ) parser . add_argument ( \"-f\" , \"--format\" , choices = formats . keys (), type = accept_custom_format , default = None , help = \"Output format. Pass your own Jinja2 template as a string with '-f custom=TEMPLATE'. \" \"Available variables: title (command or title passed with -t), code (exit status), \" \"success (boolean), failure (boolean), n (command number passed with -n), \" \"output (command output). Available filters: indent (textwrap.indent).\" , ) parser . add_argument ( \"--no-pty\" , action = \"store_false\" , dest = \"pty\" , default = True , help = \"Disable the use of a pseudo-terminal. PTY doesn't allow programs to use standard input.\" , ) parser . add_argument ( \"--no-progress\" , action = \"store_false\" , dest = \"progress\" , default = True , help = \"Don't print any progress while running a command.\" , ) parser . add_argument ( \"-o\" , \"--output\" , choices = list ( Output ), type = Output , help = \"Which output to use. Colors are supported with 'combine' only, unless the command has a 'force color' option.\" , ) parser . add_argument ( \"-q\" , \"--quiet\" , action = \"store_true\" , dest = \"quiet\" , default = False , help = \"Don't print the command output, even if it failed.\" , ) parser . add_argument ( \"-s\" , \"--silent\" , action = \"store_true\" , dest = \"silent\" , default = False , help = \"Don't print anything.\" , ) parser . add_argument ( \"-z\" , \"--zero\" , \"--nofail\" , action = \"store_true\" , dest = \"nofail\" , default = False , help = \"Don't fail. Always return a success (0) exit code.\" , ) parser . add_argument ( \"-n\" , \"--number\" , type = int , default = 1 , help = \"Command number. Useful for the 'tap' format.\" ) parser . add_argument ( \"-t\" , \"--title\" , help = \"Command title. Default is the command itself.\" ) parser . add_argument ( \"COMMAND\" , nargs = \"+\" ) return parser","title":"get_parser()"},{"location":"reference/cli/#failprint.cli.main","text":"Run the main program. This function is executed when you type failprint or python -m failprint . Parameters: Name Type Description Default args Optional[List[str]] Arguments passed from the command line. None Returns: Type Description int An exit code. Source code in failprint/cli.py def main ( args : Optional [ List [ str ]] = None ) -> int : \"\"\" Run the main program. This function is executed when you type `failprint` or `python -m failprint`. Arguments: args: Arguments passed from the command line. Returns: An exit code. \"\"\" parser = get_parser () options = parser . parse_args ( args ) return run ( options . COMMAND , number = options . number , output_type = options . output , title = options . title , fmt = options . format , pty = options . pty , nofail = options . nofail , quiet = options . quiet , silent = options . silent , progress = options . progress , )","title":"main()"},{"location":"reference/formats/","text":"\u00a4 Output-printing formats. Format \u00a4 Class to define a display format. __init__ ( self , template , progress_template = None , accept_ansi = True ) special \u00a4 Initialize the object. Parameters: Name Type Description Default template str The main template. required progress_template Optional[str] The template to show progress. None accept_ansi bool Whether to accept ANSI sequences. True Source code in failprint/formats.py def __init__ ( self , template : str , progress_template : Optional [ str ] = None , accept_ansi : bool = True ) -> None : \"\"\" Initialize the object. Arguments: template: The main template. progress_template: The template to show progress. accept_ansi: Whether to accept ANSI sequences. \"\"\" self . template = template self . progress_template = progress_template self . accept_ansi = accept_ansi accept_custom_format ( string ) \u00a4 Store the value in formats if it starts with custom. Parameters: Name Type Description Default string str A format name. required Returns: Type Description str The format name, or custom if it started with custom= . Source code in failprint/formats.py def accept_custom_format ( string : str ) -> str : \"\"\" Store the value in `formats` if it starts with custom. Arguments: string: A format name. Returns: The format name, or `custom` if it started with `custom=`. \"\"\" if string . startswith ( \"custom=\" ) and formats [ \"custom\" ] is None : formats [ \"custom\" ] = Format ( string [ 7 :]) return \"custom\" return string as_python_statement ( func , args = None , kwargs = None ) \u00a4 Transform a callable and its arguments into a Python statement string. Parameters: Name Type Description Default func Callable The callable to transform. required args Positional arguments passed to the function. None kwargs Keyword arguments passed to the function. None Returns: Type Description str A Python statement. Source code in failprint/formats.py def as_python_statement ( func : Callable , args = None , kwargs = None ) -> str : \"\"\" Transform a callable and its arguments into a Python statement string. Arguments: func: The callable to transform. args: Positional arguments passed to the function. kwargs: Keyword arguments passed to the function. Returns: A Python statement. \"\"\" args = [ repr ( arg ) for arg in args ] if args else [] kwargs = [ f \" { k } = { v !r} \" for k , v in kwargs . items ()] if kwargs else [] # noqa: WPS111,WPS221 (short name, complexity) args_str = \", \" . join ( args + kwargs ) return f \" { func . __name__ } ( { args_str } )\" as_shell_command ( cmd ) \u00a4 Rebuild a command line from system arguments. Parameters: Name Type Description Default cmd List[str] The command as a list of strings. required Returns: Type Description str A printable and shell-runnable command. Source code in failprint/formats.py def as_shell_command ( cmd : List [ str ]) -> str : # noqa: WPS231 (not that complex) \"\"\" Rebuild a command line from system arguments. Arguments: cmd: The command as a list of strings. Returns: A printable and shell-runnable command. \"\"\" parts = [] for part in cmd : if not part : parts . append ( '\"\"' ) continue has_spaces = \" \" in part has_double_quotes = '\"' in part has_single_quotes = \"'\" in part if has_double_quotes and not has_single_quotes : # double quotes, no single quotes # -> wrap in single quotes part = f \"' { part } '\" elif has_single_quotes and has_double_quotes : # double and single quotes # -> escape double quotes, wrap in double quotes part = part . replace ( '\"' , r \" \\\" \" ) part = f '\" { part } \"' elif has_single_quotes or has_spaces : # spaces or single quotes # -> wrap in double quotes part = f '\" { part } \"' parts . append ( part ) return \" \" . join ( parts ) printable_command ( cmd , args = None , kwargs = None ) \u00a4 Transform a command or function into a string. Parameters: Name Type Description Default cmd Union[str, List[str], Callable] The command or function to transform. required args Positional arguments passed to the function. None kwargs Keyword arguments passed to the function. None Returns: Type Description str A shell command or python statement string. Source code in failprint/formats.py def printable_command ( cmd : CmdFuncType , args = None , kwargs = None ) -> str : \"\"\" Transform a command or function into a string. Arguments: cmd: The command or function to transform. args: Positional arguments passed to the function. kwargs: Keyword arguments passed to the function. Returns: A shell command or python statement string. \"\"\" if isinstance ( cmd , str ): return cmd if callable ( cmd ): return as_python_statement ( cmd , args , kwargs ) return as_shell_command ( cmd )","title":"formats.py"},{"location":"reference/formats/#failprint.formats","text":"Output-printing formats.","title":"failprint.formats"},{"location":"reference/formats/#failprint.formats.Format","text":"Class to define a display format.","title":"Format"},{"location":"reference/formats/#failprint.formats.Format.__init__","text":"Initialize the object. Parameters: Name Type Description Default template str The main template. required progress_template Optional[str] The template to show progress. None accept_ansi bool Whether to accept ANSI sequences. True Source code in failprint/formats.py def __init__ ( self , template : str , progress_template : Optional [ str ] = None , accept_ansi : bool = True ) -> None : \"\"\" Initialize the object. Arguments: template: The main template. progress_template: The template to show progress. accept_ansi: Whether to accept ANSI sequences. \"\"\" self . template = template self . progress_template = progress_template self . accept_ansi = accept_ansi","title":"__init__()"},{"location":"reference/formats/#failprint.formats.accept_custom_format","text":"Store the value in formats if it starts with custom. Parameters: Name Type Description Default string str A format name. required Returns: Type Description str The format name, or custom if it started with custom= . Source code in failprint/formats.py def accept_custom_format ( string : str ) -> str : \"\"\" Store the value in `formats` if it starts with custom. Arguments: string: A format name. Returns: The format name, or `custom` if it started with `custom=`. \"\"\" if string . startswith ( \"custom=\" ) and formats [ \"custom\" ] is None : formats [ \"custom\" ] = Format ( string [ 7 :]) return \"custom\" return string","title":"accept_custom_format()"},{"location":"reference/formats/#failprint.formats.as_python_statement","text":"Transform a callable and its arguments into a Python statement string. Parameters: Name Type Description Default func Callable The callable to transform. required args Positional arguments passed to the function. None kwargs Keyword arguments passed to the function. None Returns: Type Description str A Python statement. Source code in failprint/formats.py def as_python_statement ( func : Callable , args = None , kwargs = None ) -> str : \"\"\" Transform a callable and its arguments into a Python statement string. Arguments: func: The callable to transform. args: Positional arguments passed to the function. kwargs: Keyword arguments passed to the function. Returns: A Python statement. \"\"\" args = [ repr ( arg ) for arg in args ] if args else [] kwargs = [ f \" { k } = { v !r} \" for k , v in kwargs . items ()] if kwargs else [] # noqa: WPS111,WPS221 (short name, complexity) args_str = \", \" . join ( args + kwargs ) return f \" { func . __name__ } ( { args_str } )\"","title":"as_python_statement()"},{"location":"reference/formats/#failprint.formats.as_shell_command","text":"Rebuild a command line from system arguments. Parameters: Name Type Description Default cmd List[str] The command as a list of strings. required Returns: Type Description str A printable and shell-runnable command. Source code in failprint/formats.py def as_shell_command ( cmd : List [ str ]) -> str : # noqa: WPS231 (not that complex) \"\"\" Rebuild a command line from system arguments. Arguments: cmd: The command as a list of strings. Returns: A printable and shell-runnable command. \"\"\" parts = [] for part in cmd : if not part : parts . append ( '\"\"' ) continue has_spaces = \" \" in part has_double_quotes = '\"' in part has_single_quotes = \"'\" in part if has_double_quotes and not has_single_quotes : # double quotes, no single quotes # -> wrap in single quotes part = f \"' { part } '\" elif has_single_quotes and has_double_quotes : # double and single quotes # -> escape double quotes, wrap in double quotes part = part . replace ( '\"' , r \" \\\" \" ) part = f '\" { part } \"' elif has_single_quotes or has_spaces : # spaces or single quotes # -> wrap in double quotes part = f '\" { part } \"' parts . append ( part ) return \" \" . join ( parts )","title":"as_shell_command()"},{"location":"reference/formats/#failprint.formats.printable_command","text":"Transform a command or function into a string. Parameters: Name Type Description Default cmd Union[str, List[str], Callable] The command or function to transform. required args Positional arguments passed to the function. None kwargs Keyword arguments passed to the function. None Returns: Type Description str A shell command or python statement string. Source code in failprint/formats.py def printable_command ( cmd : CmdFuncType , args = None , kwargs = None ) -> str : \"\"\" Transform a command or function into a string. Arguments: cmd: The command or function to transform. args: Positional arguments passed to the function. kwargs: Keyword arguments passed to the function. Returns: A shell command or python statement string. \"\"\" if isinstance ( cmd , str ): return cmd if callable ( cmd ): return as_python_statement ( cmd , args , kwargs ) return as_shell_command ( cmd )","title":"printable_command()"},{"location":"reference/runners/","text":"\u00a4 Functions to run commands and capture output. Output \u00a4 An enum to store the different possible output types. StdBuffer \u00a4 A simple placeholder for two memory buffers. __init__ ( self , out = None , err = None ) special \u00a4 Initialize the object. Parameters: Name Type Description Default out A buffer for standard output. None err A buffer for standard error. None Source code in failprint/runners.py def __init__ ( self , out = None , err = None ): \"\"\" Initialize the object. Arguments: out: A buffer for standard output. err: A buffer for standard error. \"\"\" self . out = out or StringIO () self . err = err or StringIO () run ( cmd , args = None , kwargs = None , number = 1 , output_type = None , title = None , fmt = None , pty = False , progress = True , nofail = False , quiet = False , silent = False ) \u00a4 Run a command in a subprocess or a Python function, and print its output if it fails. Parameters: Name Type Description Default cmd Union[str, List[str], Callable] The command to run. required args Arguments to pass to the callable. None kwargs Keyword arguments to pass to the callable. None number int The command number. 1 output_type Union[str, failprint.runners.Output] The type of output. None title Optional[str] The command title. None fmt Optional[str] The output format. None pty bool Whether to run in a PTY. False progress bool Whether to show progress. True nofail bool Whether to always succeed. False quiet bool Whether to not print the command output. False silent bool Don't print anything. False Returns: Type Description int The command exit code, or 0 if nofail is True. Source code in failprint/runners.py def run ( # noqa: WPS231 (high complexity) cmd : CmdFuncType , args = None , kwargs = None , number : int = 1 , output_type : Optional [ Union [ str , Output ]] = None , title : Optional [ str ] = None , fmt : Optional [ str ] = None , pty : bool = False , progress : bool = True , nofail : bool = False , quiet : bool = False , silent : bool = False , ) -> int : \"\"\" Run a command in a subprocess or a Python function, and print its output if it fails. Arguments: cmd: The command to run. args: Arguments to pass to the callable. kwargs: Keyword arguments to pass to the callable. number: The command number. output_type: The type of output. title: The command title. fmt: The output format. pty: Whether to run in a PTY. progress: Whether to show progress. nofail: Whether to always succeed. quiet: Whether to not print the command output. silent: Don't print anything. Returns: The command exit code, or 0 if `nofail` is True. \"\"\" format_name : str = fmt or os . environ . get ( \"FAILPRINT_FORMAT\" , DEFAULT_FORMAT ) # type: ignore format_name = accept_custom_format ( format_name ) format_obj = formats . get ( format_name , formats [ DEFAULT_FORMAT ]) env = Environment ( autoescape = False ) # noqa: S701 (no HTML: no need to escape) env . filters [ \"indent\" ] = textwrap . indent command = printable_command ( cmd , args , kwargs ) if not silent and progress and format_obj . progress_template : progress_template = env . from_string ( format_obj . progress_template ) ansiprint ( progress_template . render ({ \"title\" : title , \"command\" : command }), end = \" \\r \" ) # default output method is to combine if output_type is None : output_type = Output . COMBINE # make sure output_type is an enum value elif isinstance ( output_type , str ): output_type = Output ( output_type ) if callable ( cmd ): code , output = _run_function ( cmd , args , kwargs , output_type ) else : code , output = _run_command ( cmd , output_type , format_obj , pty ) if not silent : template = env . from_string ( format_obj . template ) ansiprint ( template . render ( { \"title\" : title , \"command\" : command , \"code\" : code , \"success\" : code == 0 , \"failure\" : code != 0 , \"number\" : number , \"output\" : output , \"nofail\" : nofail , \"quiet\" : quiet , \"silent\" : silent , }, ), ) return 0 if nofail else code stdbuffer () \u00a4 Capture output in a with statement. Yields An instance of StdBuffer . Source code in failprint/runners.py @contextmanager def stdbuffer (): \"\"\" Capture output in a `with` statement. Yields: An instance of `StdBuffer`. \"\"\" old_stdout = sys . stdout old_stderr = sys . stderr buffer = StdBuffer () sys . stdout = buffer . out sys . stderr = buffer . err yield buffer sys . stdout = old_stdout sys . stderr = old_stderr buffer . out . close () buffer . err . close ()","title":"runners.py"},{"location":"reference/runners/#failprint.runners","text":"Functions to run commands and capture output.","title":"failprint.runners"},{"location":"reference/runners/#failprint.runners.Output","text":"An enum to store the different possible output types.","title":"Output"},{"location":"reference/runners/#failprint.runners.StdBuffer","text":"A simple placeholder for two memory buffers.","title":"StdBuffer"},{"location":"reference/runners/#failprint.runners.StdBuffer.__init__","text":"Initialize the object. Parameters: Name Type Description Default out A buffer for standard output. None err A buffer for standard error. None Source code in failprint/runners.py def __init__ ( self , out = None , err = None ): \"\"\" Initialize the object. Arguments: out: A buffer for standard output. err: A buffer for standard error. \"\"\" self . out = out or StringIO () self . err = err or StringIO ()","title":"__init__()"},{"location":"reference/runners/#failprint.runners.run","text":"Run a command in a subprocess or a Python function, and print its output if it fails. Parameters: Name Type Description Default cmd Union[str, List[str], Callable] The command to run. required args Arguments to pass to the callable. None kwargs Keyword arguments to pass to the callable. None number int The command number. 1 output_type Union[str, failprint.runners.Output] The type of output. None title Optional[str] The command title. None fmt Optional[str] The output format. None pty bool Whether to run in a PTY. False progress bool Whether to show progress. True nofail bool Whether to always succeed. False quiet bool Whether to not print the command output. False silent bool Don't print anything. False Returns: Type Description int The command exit code, or 0 if nofail is True. Source code in failprint/runners.py def run ( # noqa: WPS231 (high complexity) cmd : CmdFuncType , args = None , kwargs = None , number : int = 1 , output_type : Optional [ Union [ str , Output ]] = None , title : Optional [ str ] = None , fmt : Optional [ str ] = None , pty : bool = False , progress : bool = True , nofail : bool = False , quiet : bool = False , silent : bool = False , ) -> int : \"\"\" Run a command in a subprocess or a Python function, and print its output if it fails. Arguments: cmd: The command to run. args: Arguments to pass to the callable. kwargs: Keyword arguments to pass to the callable. number: The command number. output_type: The type of output. title: The command title. fmt: The output format. pty: Whether to run in a PTY. progress: Whether to show progress. nofail: Whether to always succeed. quiet: Whether to not print the command output. silent: Don't print anything. Returns: The command exit code, or 0 if `nofail` is True. \"\"\" format_name : str = fmt or os . environ . get ( \"FAILPRINT_FORMAT\" , DEFAULT_FORMAT ) # type: ignore format_name = accept_custom_format ( format_name ) format_obj = formats . get ( format_name , formats [ DEFAULT_FORMAT ]) env = Environment ( autoescape = False ) # noqa: S701 (no HTML: no need to escape) env . filters [ \"indent\" ] = textwrap . indent command = printable_command ( cmd , args , kwargs ) if not silent and progress and format_obj . progress_template : progress_template = env . from_string ( format_obj . progress_template ) ansiprint ( progress_template . render ({ \"title\" : title , \"command\" : command }), end = \" \\r \" ) # default output method is to combine if output_type is None : output_type = Output . COMBINE # make sure output_type is an enum value elif isinstance ( output_type , str ): output_type = Output ( output_type ) if callable ( cmd ): code , output = _run_function ( cmd , args , kwargs , output_type ) else : code , output = _run_command ( cmd , output_type , format_obj , pty ) if not silent : template = env . from_string ( format_obj . template ) ansiprint ( template . render ( { \"title\" : title , \"command\" : command , \"code\" : code , \"success\" : code == 0 , \"failure\" : code != 0 , \"number\" : number , \"output\" : output , \"nofail\" : nofail , \"quiet\" : quiet , \"silent\" : silent , }, ), ) return 0 if nofail else code","title":"run()"},{"location":"reference/runners/#failprint.runners.stdbuffer","text":"Capture output in a with statement. Yields An instance of StdBuffer . Source code in failprint/runners.py @contextmanager def stdbuffer (): \"\"\" Capture output in a `with` statement. Yields: An instance of `StdBuffer`. \"\"\" old_stdout = sys . stdout old_stderr = sys . stderr buffer = StdBuffer () sys . stdout = buffer . out sys . stderr = buffer . err yield buffer sys . stdout = old_stdout sys . stderr = old_stderr buffer . out . close () buffer . err . close ()","title":"stdbuffer()"},{"location":"reference/types/","text":"\u00a4 Special types. Attributes: Name Type Description CmdType Type for a command. CmdFuncType Type for a command or function.","title":"types.py"},{"location":"reference/types/#failprint.types","text":"Special types. Attributes: Name Type Description CmdType Type for a command. CmdFuncType Type for a command or function.","title":"failprint.types"}]}